<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Behavioral Monitoring System - Sign Up</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      }

      body {
        height: 110vh;
        display: flex;
        flex-direction: row;
        background: linear-gradient(135deg, #ff7e5f 0%, #feb47b 100%);
        color: white;
      }

      .left-panel,
      .right-panel {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .header-container {
        text-align: left;
        max-width: 80%;
      }

      /* Logo styling */
      .logo {
        position: absolute;
        top: 50px;
        left: 70px;
        width: 100px; /* Adjust this value to control the size */
        height: auto;
      }

      .main-title {
        font-size: 3.5rem;
        font-weight: 800;
        margin-bottom: 1rem;
        letter-spacing: 3px;
        text-transform: uppercase;
        background: linear-gradient(
          120deg,
          #ffffff 0%,
          #e0e0e0 50%,
          #ffffff 100%
        );
        background-size: 200% auto;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      }

      .sub-title {
        font-size: 1.8rem;
        font-weight: 600;
        letter-spacing: 2px;
        text-transform: uppercase;
      }

      .signup-container {
        position: relative;
        background: rgba(255, 255, 255, 0.95);
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        width: 65%;
        max-width: 800px;
        height: auto;
        color: #2d3748;
      }

      .signup-title {
        color: #2d3748;
        margin-bottom: 1.5rem;
        text-align: center;
        font-size: 1.8rem;
      }

      .input-group {
        margin-bottom: 1rem;
      }

      .input-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #4a5568;
        font-size: 0.9rem;
      }

      .input-group .mandatory {
        color: red;
        margin-left: 0.25rem;
        font-size: 1rem;
      }

      .input-group input {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #e2e8f0;
        border-radius: 0.5rem;
        font-size: 1rem;
        transition: border-color 0.3s ease;
      }

      .input-group input:focus {
        outline: none;
        border-color: #1e3c72;
      }

      .terms-and-conditions {
        display: flex;
        align-items: center;
        margin-bottom: 1.75rem;
        color: #4a5568;
      }

      .terms-and-conditions .mandatory {
        color: red;
        margin-left: 0.25rem;
        font-size: 1rem;
      }

      .terms-and-conditions input {
        margin-right: 0.5rem;
      }

      button {
        width: 100%;
        padding: 0.75rem;
        background: #1e3c72;
        color: white;
        border: none;
        border-radius: 0.5rem;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }

      button:hover {
        background: #2a5298;
      }

      button:disabled {
        background: #cccccc;
        cursor: not-allowed;
      }

      .login-link {
        text-align: center;
        margin-top: 1.5rem; /* Added margin to create a gap after submit button */
        font-size: 0.9rem;
      }

      .login-link a {
        color: #1e3c72;
        text-decoration: none;
        font-weight: bold;
      }

      .login-link a:hover {
        text-decoration: underline;
      }

      .terms-btn {
        background: none;
        border: none;
        color: #1e3c72;
        text-decoration: underline;
        cursor: pointer;
        font-size: 0.9rem;
      }

      .terms-btn:hover {
        color: #2a5298;
      }

      /* Modal styling */
      .modal {
        display: none;
        position: fixed;
        z-index: 10;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
      }

      .modal-content {
        background-color: #fff;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        border-radius: 8px;
        width: 50%;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
        color: #333;
      }

      .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
      }

      .close:hover,
      .close:focus {
        color: black;
        text-decoration: none;
      }

      .success-message {
        display: none;
        position: absolute;
        bottom: -60px;
        left: 0;
        background-color: #4caf50;
        color: white;
        padding: 15px 25px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        animation: slideIn 0.5s ease-out;
      }

      .error-message {
        color: #ff0000;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: none;
      }

      .spinner-overlay {
        display: none;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 1rem;
        z-index: 1000;
        justify-content: center;
        align-items: center;
      }

      /* Spinner Animation */
      .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #1e3c72;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      .spinner-text {
        position: absolute;
        margin-top: 60px;
        color: #1e3c72;
        font-size: 0.9rem;
        font-weight: 500;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      @media (max-width: 768px) {
        body {
          flex-direction: column;
        }
        .left-panel,
        .right-panel {
          flex: none;
          width: 100%;
        }
      }
    </style>
  </head>
  <body>
    <div class="left-panel">
      <div class="header-container">
        <img
          src="{{ url_for('static', filename='images/HBMS.png') }}"
          alt="Logo"
          class="logo"
        />
        <h1 class="main-title">Health & Behavioral Monitoring System (HBMS)</h1>
        <h2 class="sub-title">Innovation and Entrepreneurship (211ENT1401)</h2>
      </div>
    </div>

    <div class="right-panel">
      <div class="signup-container">
        <div class="spinner-overlay">
          <div class="spinner"></div>
          <div class="spinner-text">Creating your account...</div>
        </div>
        <div id="successMessage" class="success-message">
          Account created successfully! Please Login into your Account
        </div>
        <h1 class="signup-title">Create Account</h1>
        <form id="signupForm">
          <div class="input-group">
            <label for="firstName"
              >First Name<span class="mandatory">*</span></label
            >
            <input type="text" id="firstName" required />
            <div id="firstNameError" class="error-message"></div>
          </div>
          <div class="input-group">
            <label for="lastName"
              >Last Name<span class="mandatory">*</span></label
            >
            <input type="text" id="lastName" required />
            <div id="lastNameError" class="error-message"></div>
          </div>
          <div class="input-group">
            <label for="email">Email<span class="mandatory">*</span></label>
            <input type="email" id="email" required />
            <div id="emailError" class="error-message"></div>
          </div>
          <div class="input-group">
            <label for="password"
              >Password<span class="mandatory">*</span></label
            >
            <input type="password" id="password" required />
            <div id="passwordError" class="error-message"></div>
          </div>
          <div class="input-group">
            <label for="confirmPassword"
              >Confirm Password<span class="mandatory">*</span></label
            >
            <input type="password" id="confirmPassword" required />
            <div id="confirmPasswordError" class="error-message"></div>
          </div>
          <div class="terms-and-conditions">
            <input type="checkbox" id="terms" required />
            <label for="terms">
              I agree to the
              <a href="#" class="terms-btn">Terms and Conditions</a
              ><span class="mandatory">*</span>
            </label>
            <div id="termsError" class="error-message"></div>
          </div>
          <button type="submit" class="submit-btn">Submit</button>
          <div class="login-link">
            <span>Already have an account?</span>
            <a href="{{ url_for('home') }}">Log In</a>
          </div>
        </form>
      </div>
    </div>

    <div id="termsModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Terms and Conditions</h2>
        <p>
          <strong>1. Acceptance of Terms:</strong><br />
          By using this application, you agree to the following terms and
          conditions. If you do not agree, please refrain from using the
          application.
        </p>
        <p>
          <strong>2. Purpose:</strong><br />
          This application is designed to monitor behavioral patterns of
          non-verbal residents using sensor data and machine learning
          algorithms. It is intended to assist caregivers by providing
          actionable insights.
        </p>
        <p>
          <strong>3. Data Collection and Privacy:</strong><br />
          a. The system collects data such as facial expressions, physiological
          signals, motion patterns, and audio cues.<br />
          b. All data collected will be securely stored and processed in
          compliance with relevant data protection laws.<br />
          c. Personal and sensitive data will not be shared with third parties
          without explicit consent.
        </p>
        <p>
          <strong>4. Usage Disclaimer:</strong><br />
          a. This application provides insights based on algorithmic analysis
          and should not replace professional medical advice.<br />
          b. Users are advised to consult qualified professionals for any
          health-related concerns.
        </p>
        <p>
          <strong>5. User Responsibilities:</strong><br />
          a. Users must ensure the accuracy of the data entered into the
          system.<br />
          b. Users are responsible for maintaining the security of their
          accounts and ensuring unauthorized access is prevented.
        </p>
        <p>
          <strong>6. Intellectual Property:</strong><br />
          a. All intellectual property related to the application, including
          software, design, and documentation, is owned by the developers.<br />
          b. Unauthorized reproduction, distribution, or modification of the
          application is strictly prohibited.
        </p>
        <p>
          <strong>7. Limitation of Liability:</strong><br />
          The developers are not liable for any damages or losses resulting from
          the use or inability to use the application, including but not limited
          to data inaccuracies or system errors.
        </p>
        <p>
          <strong>8. Modifications to Terms:</strong><br />
          The developers reserve the right to update or modify these terms at
          any time. Users will be notified of significant changes, and continued
          use of the application constitutes acceptance of the updated terms.
        </p>
        <p>
          <strong>9. Termination:</strong><br />
          The developers reserve the right to suspend or terminate access to the
          application in case of violation of these terms or misuse of the
          system.
        </p>
        <p>
          <strong>10. Governing Law:</strong><br />
          These terms are governed by and construed in accordance with the laws
          of the jurisdiction in which the application is deployed.
        </p>
        <p>
          <strong>11. Contact:</strong><br />
          For any questions or concerns regarding these terms, please contact
          our support team.
        </p>
      </div>
    </div>

    <!-- Firebase Configuration -->
    <script type="module">
      // Import Firebase SDK
      import { initializeApp } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-app.js";
      import {
        getAuth,
        GoogleAuthProvider,
        signInWithPopup,
        createUserWithEmailAndPassword,
        updateProfile,
      } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-auth.js";

      // Terms Modal Functionality
      const modal = document.getElementById("termsModal");
      const termsBtn = document.querySelector(".terms-btn");
      const closeBtn = document.querySelector(".close");

      // Add spinner control functions
      function showSpinner() {
        const spinner = document.querySelector(".spinner-overlay");
        spinner.style.display = "flex";
      }

      function hideSpinner() {
        const spinner = document.querySelector(".spinner-overlay");
        spinner.style.display = "none";
      }

      termsBtn.onclick = (e) => {
        e.preventDefault();
        modal.style.display = "block";
      };

      closeBtn.onclick = () => {
        modal.style.display = "none";
      };

      window.onclick = (e) => {
        if (e.target === modal) {
          modal.style.display = "none";
        }
      };

      // Firebase configuration
      const firebaseConfig = {
        apiKey: "AIzaSyCvHiTAGdlMaH2WNb4LmxlUMJ9BIwNxF_g",
        authDomain: "bms-exsel.firebaseapp.com",
        projectId: "bms-exsel",
        storageBucket: "bms-exsel.firebasestorage.app",
        messagingSenderId: "950039193184",
        appId: "1:950039193184:web:f97fc79d5798ab3f628505",
        measurementId: "G-L8S1N8Q0CD",
      };

      // Initialize Firebase
      const app = initializeApp(firebaseConfig);
      const auth = getAuth(app);
      const provider = new GoogleAuthProvider();
      // Default profile picture URL
      const defaultProfilePic =
        "https://cdn-icons-png.flaticon.com/512/847/847969.png";

      // Show error message
      function showError(elementId, message) {
        const errorElement = document.getElementById(elementId);
        errorElement.textContent = message;
        errorElement.style.display = "block";
      }

      // Clear error message
      function clearError(elementId) {
        const errorElement = document.getElementById(elementId);
        errorElement.style.display = "none";
      }

      // Show success message and clear form
      function showSuccessMessage() {
        const successMessage = document.getElementById("successMessage");
        const form = document.getElementById("signupForm");

        // Show success message
        successMessage.style.display = "block";

        // Clear all form inputs
        form.reset();

        // Hide the message after 6 seconds
        setTimeout(() => {
          successMessage.style.display = "none";
        }, 6000);
      }

      // Email/Password Sign up handler
      document
        .getElementById("signupForm")
        .addEventListener("submit", async (e) => {
          e.preventDefault();

          // Clear previous errors
          [
            "firstNameError",
            "lastNameError",
            "emailError",
            "passwordError",
            "confirmPasswordError",
          ].forEach(clearError);

          const email = document.getElementById("email").value;
          const password = document.getElementById("password").value;
          const confirmPassword =
            document.getElementById("confirmPassword").value;
          const firstName = document.getElementById("firstName").value;
          const lastName = document.getElementById("lastName").value;

          // Basic validation
          if (firstName.length < 2) {
            showError(
              "firstNameError",
              "First name must be at least 2 characters"
            );
            return;
          }

          if (lastName.length < 2) {
            showError(
              "lastNameError",
              "Last name must be at least 2 characters"
            );
            return;
          }

          if (password.length < 6) {
            showError(
              "passwordError",
              "Password must be at least 6 characters"
            );
            return;
          }

          if (password !== confirmPassword) {
            showError("confirmPasswordError", "Passwords do not match");
            return;
          }

          try {
            showSpinner(); // Show spinner before starting the signup process
            const userCredential = await createUserWithEmailAndPassword(
              auth,
              email,
              password
            );
            const user = userCredential.user;
            console.log("User signed up:", user);

            // Update user profile with name & default profile picture
            await updateProfile(user, {
              displayName: `${firstName} ${lastName}`,
              photoURL: defaultProfilePic,
            });
            console.log("Profile Updated:", user);

            hideSpinner(); // Hide spinner after successful signup
            showSuccessMessage();

            // Here you would typically store additional user data (first name, last name)
            // in Firebase Firestore or Realtime Database

            // Show success message and redirect
            //showSuccessMessage();

            // Show success message
            alert("Account created successfully! Redirecting to login...");
            window.location.href = "{{ url_for('home') }}"; // Redirect to login page
          } catch (error) {
            hideSpinner(); // Hide spinner if there's an error
            console.error("Sign up error:", error);
            if (error.code === "auth/email-already-in-use") {
              showError("emailError", "Email already in use");
            } else if (error.code === "auth/invalid-email") {
              showError("emailError", "Invalid email address");
            } else if (error.code === "auth/weak-password") {
              showError("passwordError", "Password is too weak");
            } else {
              alert("Failed to sign up: " + error.message);
            }
          }
        });
    </script>
  </body>
</html>
