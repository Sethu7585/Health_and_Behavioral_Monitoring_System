<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Favicon -->
    <link
      rel="icon"
      type="image/x-icon"
      href="{{ url_for('static', filename='/images/HBMS.ico') }}"
    />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BMS - Dashboard</title>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      }

      :root {
        --sidebar-width: 250px;
        --header-height: 70px;
        --primary-color: #1e3c72;
        --secondary-color: #ff7e5f;
        --hover-color: #2a5298;
      }

      body {
        min-height: 100vh;
        background: #f5f7fa;
      }

      .sidebar {
        position: fixed;
        left: 0;
        top: 0;
        bottom: 0;
        width: var(--sidebar-width);
        background: var(--primary-color);
        color: white;
        transition: 0.3s;
        z-index: 1000;
        display: flex;
        flex-direction: column;
        overflow-y: auto; /* Enables scrolling for menu items */
        overflow-x: hidden; /* Prevents horizontal scrolling */
        max-height: 100vh; /* Keeps sidebar within viewport height */
        scrollbar-width: thin; /* Makes scrollbar thinner */
        scrollbar-color: #ccc transparent; /* Custom scrollbar colors */
      }

      /* Optional: Style the scrollbar for WebKit browsers */
      .sidebar::-webkit-scrollbar {
        width: 6px;
      }

      .sidebar::-webkit-scrollbar-thumb {
        background-color: #888; /* Scrollbar color */
        border-radius: 5px;
      }

      .sidebar::-webkit-scrollbar-thumb:hover {
        background-color: #555; /* Darker on hover */
      }

      /* Ensure the content inside the sidebar doesn't overflow */
      .sidebar nav {
        display: flex;
        flex-direction: column;
        overflow-x: hidden; /* Extra safety */
      }

      .nav-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 10px;
        color: white;
        text-decoration: none; /* Removes underline */
        border-radius: 5px;
        transition: 0.3s;
        cursor: pointer;
      }

      .nav-item:hover {
        background-color: #2a5298;
      }

      .nav-item.active {
        background-color: #ff7e5f;
      }

      /* Ensure all nested elements inside links also inherit no underline */
      .nav-item i,
      .nav-item span {
        text-decoration: none; /* Ensures icons and text don't get underlined */
      }

      .sidebar-header {
        position: sticky;
        top: 0;
        background: var(--primary-color);
        z-index: 1001; /* Ensures it stays above scrolling content */
        padding: 1rem 0;
        text-align: center;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .sidebar-header img {
        width: 140px; /* Adjust width */
        max-width: 100%;
        height: auto; /* Maintain aspect ratio */
        display: block; /* Remove extra space */
        margin: 0 auto; /* Center the image */
      }

      /* Header Styles */
      .header {
        position: fixed;
        right: 0;
        top: 0;
        left: var(--sidebar-width);
        height: var(--header-height);
        background: white;
        padding: 1rem 2rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        z-index: 999;
      }

      /* Main Content Area */
      .main-content {
        margin-left: var(--sidebar-width);
        padding-top: var(--header-height);
        padding: calc(var(--header-height) + 20px) 20px 20px;
        min-height: 100vh;
      }

      .search-bar {
        display: flex;
        align-items: center;
        background: #ffffff;
        border-radius: 25px;
        padding: 8px 15px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        width: 300px;
        transition: all 0.3s ease-in-out;
        border: 1px solid #ccc;
        position: relative;
      }

      .search-bar i {
        font-size: 16px;
        color: #666;
        position: absolute;
        left: 12px; /* Adjust icon position inside the box */
      }

      .search-bar input {
        border: none;
        outline: none;
        font-size: 16px;
        padding: 8px 10px 8px 35px; /* Left padding to prevent overlap */
        width: 100%;
        background: transparent;
        border-radius: 25px;
      }

      .search-bar:hover {
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
      }
      .user-profile {
        display: flex;
        align-items: center;
        gap: 1rem;
        cursor: pointer;
      }

      .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: var(--primary-color);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
      }
      .user-avatar img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }
      /* Dropdown Styles */
      .profile-dropdown {
        position: absolute;
        top: 70px; /* Adjust to match header height */
        right: 20px;
        background: white;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        width: 200px;
        padding: 15px;
        display: none; /* Initially Hidden */
        z-index: 1000;
      }

      .profile-header {
        text-align: center;
        margin-bottom: 10px;
      }

      .profile-header img {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        margin-bottom: 5px;
      }

      .profile-header h4 {
        font-size: 16px;
        color: #333;
      }

      .profile-dropdown button {
        width: 100%;
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        margin: 5px 0;
        transition: background 0.3s;
      }

      .profile-dropdown button:hover {
        background: var(--hover-color);
      }

      .dropdown-menu {
        position: absolute;
        top: 100%;
        right: 0;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        width: 200px;
        display: none;
        z-index: 1000;
        margin-top: 10px;
        border: 1px solid #eee;
      }

      .dropdown-menu.active {
        display: block;
      }

      .dropdown-item {
        padding: 12px 16px;
        display: flex;
        align-items: center;
        gap: 10px;
        color: #333;
        text-decoration: none;
        transition: background-color 0.2s;
      }

      .dropdown-item:first-child {
        border-radius: 8px 8px 0 0;
      }

      .dropdown-item:last-child {
        border-radius: 0 0 8px 8px;
      }

      .dropdown-item:hover {
        background-color: #f5f7fa;
      }

      .dropdown-item i {
        width: 16px;
        color: var(--primary-color);
      }

      /* Add arrow to dropdown */
      .dropdown-menu::before {
        content: "";
        position: absolute;
        top: -8px;
        right: 20px;
        width: 16px;
        height: 16px;
        background: white;
        transform: rotate(45deg);
        border-left: 1px solid #eee;
        border-top: 1px solid #eee;
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        .sidebar {
          transform: translateX(-100%);
        }

        .header {
          left: 0;
        }

        .main-content {
          margin-left: 0;
        }

        .sidebar.active {
          transform: translateX(0);
        }
      }
    </style>
  </head>
  <body>
    <!-- Sidebar -->
    <div class="sidebar">
      <div class="sidebar-header">
        <img src="static/images/HBMS.png" alt="Logo" />
        <h3>HBMS Dashboard</h3>
      </div>
      <nav>
        <a href="/home" class="nav-item">
          <i class="fas fa-home"></i>
          <span>Home</span>
        </a>
        <a href="/live-monitoring" class="nav-item">
          <i class="fas fa-video"></i>
          <span>Live Monitoring</span>
        </a>
        <a href="/analytics" class="nav-item">
          <i class="fas fa-chart-line"></i>
          <span>Analytics</span>
        </a>
        <a href="/notifications" class="nav-item">
          <i class="fas fa-bell"></i>
          <span>Notifications</span>
        </a>
        <a href="/reports" class="nav-item">
          <i class="fas fa-file-alt"></i>
          <span>Reports</span>
        </a>
        <a href="/appointments" class="nav-item">
          <i class="fas fa-calendar-check"></i>
          <span>Appointments</span>
        </a>
        <a href="/chat" class="nav-item">
          <i class="fas fa-robot"></i>
          <span>AI Chat Assistance</span>
        </a>
        <a href="/education" class="nav-item">
          <i class="fas fa-book-medical"></i>
          <span>Health Education</span>
        </a>
        <a href="/sensor-management" class="nav-item active">
          <i class="fas fa-microchip"></i>
          <span>Sensor Management</span>
        </a>
        <a href="/user-management" class="nav-item">
          <i class="fas fa-users"></i>
          <span>User Management</span>
        </a>

        <a href="/professional-about-us-page" class="nav-item">
          <i class="fas fa-info-circle"></i>
          <span>About Us</span>
        </a>
        <a href="/feedback" class="nav-item">
          <i class="fas fa-comment-dots"></i>
          <span>Feedback</span>
        </a>
        <a href="/change-password" class="nav-item">
          <i class="fas fa-key"></i>
          <span>Change Password</span>
        </a>
      </nav>
    </div>

    <header class="header">
      <div class="search-bar">
        <i class="fas fa-search"></i>
        <input type="text" placeholder="Search..." />
      </div>
      <div class="user-profile">
        <div class="notifications">
          <i class="fas fa-bell"></i>
        </div>
        <div class="user-avatar">
          <!-- Profile picture will be inserted dynamically -->
        </div>
        <div class="user-info">
          <h4 id="user-name">Loading...</h4>
        </div>
        <!-- Add Dropdown Menu -->
        <div class="dropdown-menu">
          <a
            href="#"
            class="dropdown-item"
            id="update-profile-btn"
            data-page="/firebase-profile-update"
          >
            <i class="fas fa-user"></i>
            Update Profile
          </a>
          <a href="#" class="dropdown-item" id="logout-btn">
            <i class="fas fa-sign-out-alt"></i>
            Logout
          </a>
        </div>
      </div>
    </header>

    <!-- Main Content Area -->
    <div id="main-content" class="main-content">
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <meta
            name="viewport"
            content="width=device-width, initial-scale=1.0"
          />
          <title>Sensor Management</title>
          <style>
            .sensor-management-container {
              padding: 20px;
              max-width: 1200px;
              margin: 0 auto;
            }

            .page-header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 24px;
            }

            .add-sensor-btn {
              background-color: #1e3c72;
              color: white;
              border: none;
              padding: 10px 16px;
              border-radius: 5px;
              cursor: pointer;
              display: flex;
              align-items: center;
              gap: 8px;
              transition: background-color 0.3s;
            }

            .add-sensor-btn:hover {
              background-color: #2a5298;
            }

            .filters {
              display: flex;
              gap: 16px;
              margin-bottom: 20px;
              flex-wrap: wrap;
            }

            .filter-section {
              min-width: 200px;
            }

            .filter-section label {
              display: block;
              margin-bottom: 6px;
              font-weight: 500;
              color: #555;
            }

            .filter-section select,
            .filter-section input {
              width: 100%;
              padding: 8px 12px;
              border: 1px solid #ddd;
              border-radius: 4px;
              background-color: white;
            }

            .sensors-grid {
              display: grid;
              grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
              gap: 20px;
              margin-top: 20px;
            }

            .sensor-card {
              background: white;
              border-radius: 10px;
              box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
              overflow: hidden;
              transition: transform 0.2s, box-shadow 0.2s;
            }

            .sensor-card:hover {
              transform: translateY(-5px);
              box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            }

            .sensor-header {
              background: #f5f7fa;
              padding: 15px;
              border-bottom: 1px solid #eee;
              display: flex;
              justify-content: space-between;
              align-items: center;
            }

            .sensor-title {
              margin: 0;
              font-size: 18px;
              display: flex;
              align-items: center;
              gap: 8px;
            }

            .sensor-status {
              display: inline-block;
              padding: 4px 8px;
              border-radius: 4px;
              font-size: 12px;
              font-weight: 500;
            }

            .status-active {
              background-color: #e6f7ee;
              color: #0d904f;
            }

            .status-inactive {
              background-color: #feeae9;
              color: #d63031;
            }

            .status-maintenance {
              background-color: #fff8e6;
              color: #f39c12;
            }

            .sensor-body {
              padding: 15px;
            }

            .sensor-info {
              display: grid;
              grid-template-columns: 1fr 1fr;
              gap: 10px;
              margin-bottom: 15px;
            }

            .info-item {
              display: flex;
              flex-direction: column;
            }

            .info-label {
              font-size: 12px;
              color: #888;
            }

            .info-value {
              font-weight: 500;
              margin-top: 3px;
            }

            .sensor-footer {
              display: flex;
              gap: 10px;
              padding: 15px;
              border-top: 1px solid #eee;
            }

            .sensor-action {
              padding: 8px 12px;
              border: none;
              border-radius: 4px;
              cursor: pointer;
              font-size: 14px;
              display: flex;
              align-items: center;
              gap: 5px;
              flex: 1;
              justify-content: center;
              transition: background-color 0.2s;
            }

            .edit-btn {
              background-color: #e6f0ff;
              color: #1e3c72;
            }

            .edit-btn:hover {
              background-color: #d1e3ff;
            }

            .delete-btn {
              background-color: #feeae9;
              color: #d63031;
            }

            .delete-btn:hover {
              background-color: #fcd5d3;
            }

            .modal {
              display: none;
              position: fixed;
              z-index: 1001;
              left: 0;
              top: 0;
              width: 100%;
              height: 100%;
              background-color: rgba(0, 0, 0, 0.5);
              overflow: auto;
            }

            .modal-content {
              background-color: #fff;
              margin: 10% auto;
              padding: 20px;
              border-radius: 10px;
              width: 500px;
              max-width: 90%;
              box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
              position: relative;
            }

            .modal-header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 20px;
            }

            .modal-header h2 {
              margin: 0;
              font-size: 20px;
            }

            .close-modal {
              font-size: 24px;
              font-weight: bold;
              cursor: pointer;
              color: #aaa;
            }

            .close-modal:hover {
              color: #555;
            }

            .form-group {
              margin-bottom: 16px;
            }

            .form-group label {
              display: block;
              margin-bottom: 6px;
              font-weight: 500;
            }

            .form-group input,
            .form-group select {
              width: 100%;
              padding: 10px;
              border: 1px solid #ddd;
              border-radius: 4px;
            }

            .form-actions {
              display: flex;
              justify-content: flex-end;
              gap: 10px;
              margin-top: 20px;
            }

            .form-actions button {
              padding: 10px 16px;
              border-radius: 4px;
              cursor: pointer;
              font-size: 14px;
            }

            .cancel-btn {
              background-color: #f1f2f6;
              border: none;
              color: #555;
            }

            .save-btn {
              background-color: #1e3c72;
              border: none;
              color: white;
            }

            .cancel-btn:hover {
              background-color: #e4e6eb;
            }

            .save-btn:hover {
              background-color: #2a5298;
            }

            /* Pagination styles */
            .pagination {
              display: flex;
              justify-content: center;
              margin-top: 30px;
              gap: 5px;
            }

            .pagination button {
              padding: 8px 14px;
              background-color: #fff;
              border: 1px solid #ddd;
              border-radius: 4px;
              cursor: pointer;
              transition: background-color 0.2s;
            }

            .pagination button.active {
              background-color: #1e3c72;
              color: white;
              border-color: #1e3c72;
            }

            .pagination button:hover:not(.active) {
              background-color: #f5f5f5;
            }

            /* Responsive adjustments */
            @media (max-width: 768px) {
              .filters {
                flex-direction: column;
              }

              .filter-section {
                width: 100%;
              }

              .sensor-info {
                grid-template-columns: 1fr;
              }
            }
          </style>
        </head>
        <body>
          <div class="sensor-management-container">
            <div class="page-header">
              <h1>Sensor Management</h1>
              <button id="add-sensor-btn" class="add-sensor-btn">
                <i class="fas fa-plus"></i> Add Sensor
              </button>
            </div>

            <div class="filters">
              <div class="filter-section">
                <label for="type-filter">Sensor Type</label>
                <select id="type-filter">
                  <option value="all">All Types</option>
                  <option value="temperature">Temperature</option>
                  <option value="humidity">Humidity</option>
                  <option value="motion">Motion</option>
                  <option value="pressure">Pressure</option>
                  <option value="light">Light</option>
                </select>
              </div>

              <div class="filter-section">
                <label for="location-filter">Location</label>
                <select id="location-filter">
                  <option value="all">All Locations</option>
                  <option value="building-a">Building A</option>
                  <option value="building-b">Building B</option>
                  <option value="warehouse">Warehouse</option>
                  <option value="outdoor">Outdoor</option>
                </select>
              </div>

              <div class="filter-section">
                <label for="status-filter">Status</label>
                <select id="status-filter">
                  <option value="all">All Statuses</option>
                  <option value="active">Active</option>
                  <option value="inactive">Inactive</option>
                  <option value="maintenance">Maintenance</option>
                </select>
              </div>

              <div class="filter-section">
                <label for="search">Search</label>
                <input
                  type="text"
                  id="search"
                  placeholder="Search by ID or name..."
                />
              </div>
            </div>

            <div class="sensors-grid" id="sensors-container">
              <!-- Sensor cards will be dynamically generated here -->
            </div>

            <div class="pagination" id="pagination">
              <!-- Pagination will be dynamically generated here -->
            </div>
          </div>

          <!-- Add/Edit Sensor Modal -->
          <div id="sensor-modal" class="modal">
            <div class="modal-content">
              <div class="modal-header">
                <h2 id="modal-title">Add New Sensor</h2>
                <span class="close-modal">&times;</span>
              </div>

              <form id="sensor-form">
                <input type="hidden" id="sensor-id" />

                <div class="form-group">
                  <label for="sensor-name">Sensor Name</label>
                  <input type="text" id="sensor-name" required />
                </div>

                <div class="form-group">
                  <label for="sensor-type">Sensor Type</label>
                  <select id="sensor-type" required>
                    <option value="">Select Type</option>
                    <option value="temperature">Temperature</option>
                    <option value="humidity">Humidity</option>
                    <option value="motion">Motion</option>
                    <option value="pressure">Pressure</option>
                    <option value="light">Light</option>
                  </select>
                </div>

                <div class="form-group">
                  <label for="sensor-location">Location</label>
                  <select id="sensor-location" required>
                    <option value="">Select Location</option>
                    <option value="building-a">Building A</option>
                    <option value="building-b">Building B</option>
                    <option value="warehouse">Warehouse</option>
                    <option value="outdoor">Outdoor</option>
                  </select>
                </div>

                <div class="form-group">
                  <label for="sensor-status">Status</label>
                  <select id="sensor-status" required>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="maintenance">Maintenance</option>
                  </select>
                </div>

                <div class="form-group">
                  <label for="sensor-interval"
                    >Reporting Interval (seconds)</label
                  >
                  <input type="number" id="sensor-interval" min="1" required />
                </div>

                <div class="form-group">
                  <label for="sensor-threshold">Alert Threshold</label>
                  <input type="number" id="sensor-threshold" required />
                </div>

                <div class="form-actions">
                  <button type="button" class="cancel-btn" id="cancel-btn">
                    Cancel
                  </button>
                  <button type="submit" class="save-btn">Save Sensor</button>
                </div>
              </form>
            </div>
          </div>

          <script>
            // Sample sensor data
            const sensorData = [
              {
                id: "TEMP001",
                name: "Heart Rate Sensor",
                type: "temperature",
                location: "building-a",
                status: "active",
                lastReading: "24.5°C",
                lastUpdate: "2025-03-09T08:30:00",
                interval: 60,
                threshold: 28,
                battery: "87%",
              },
              {
                id: "HUM002",
                name: "Humidity Sensor",
                type: "humidity",
                location: "building-a",
                status: "active",
                lastReading: "45%",
                lastUpdate: "2025-03-09T08:35:00",
                interval: 60,
                threshold: 60,
                battery: "92%",
              },
              {
                id: "MOT003",
                name: "Motion Detection Sensor",
                type: "motion",
                location: "warehouse",
                status: "inactive",
                lastReading: "No motion",
                lastUpdate: "2025-03-09T07:45:00",
                interval: 30,
                threshold: 1,
                battery: "15%",
              },
              {
                id: "TEMP004",
                name: "Blood Pressure Sensor",
                type: "temperature",
                location: "warehouse",
                status: "active",
                lastReading: "2.1°C",
                lastUpdate: "2025-03-09T08:40:00",
                interval: 30,
                threshold: 5,
                battery: "76%",
              },
              {
                id: "PRESS005",
                name: "Pressure Sensor",
                type: "pressure",
                location: "building-b",
                status: "maintenance",
                lastReading: "101.2 kPa",
                lastUpdate: "2025-03-09T06:15:00",
                interval: 120,
                threshold: 110,
                battery: "62%",
              },
              {
                id: "LIGHT006",
                name: "Light Detection Sensor",
                type: "light",
                location: "outdoor",
                status: "active",
                lastReading: "12500 lux",
                lastUpdate: "2025-03-09T08:45:00",
                interval: 300,
                threshold: 1000,
                battery: "54%",
              },
              {
                id: "TEMP007",
                name: "Room Temperature Sensor",
                type: "temperature",
                location: "building-b",
                status: "active",
                lastReading: "22.8°C",
                lastUpdate: "2025-03-09T08:37:00",
                interval: 60,
                threshold: 26,
                battery: "81%",
              },
              {
                id: "HUM008",
                name: "Pulse Rate Sensor",
                type: "humidity",
                location: "building-a",
                status: "active",
                lastReading: "40%",
                lastUpdate: "2025-03-09T08:38:00",
                interval: 120,
                threshold: 50,
                battery: "79%",
              },
            ];

            // Initialize sensor management page
            function initSensorManagement() {
              // Display sensors
              displaySensors(sensorData);
              setupPagination(sensorData);

              // Set up event listeners
              document
                .getElementById("add-sensor-btn")
                .addEventListener("click", () => openModal());

              document
                .querySelector(".close-modal")
                .addEventListener("click", () => {
                  document.getElementById("sensor-modal").style.display =
                    "none";
                });

              document
                .getElementById("cancel-btn")
                .addEventListener("click", () => {
                  document.getElementById("sensor-modal").style.display =
                    "none";
                });

              document
                .getElementById("sensor-form")
                .addEventListener("submit", (e) => {
                  e.preventDefault();
                  saveSensor();
                });

              // Set up filter listeners
              document
                .getElementById("type-filter")
                .addEventListener("change", filterSensors);
              document
                .getElementById("location-filter")
                .addEventListener("change", filterSensors);
              document
                .getElementById("status-filter")
                .addEventListener("change", filterSensors);
              document
                .getElementById("search")
                .addEventListener("input", filterSensors);

              // Close modal when clicking outside
              window.addEventListener("click", (e) => {
                const modal = document.getElementById("sensor-modal");
                if (e.target === modal) {
                  modal.style.display = "none";
                }
              });
            }

            // Display sensors based on current filters
            function displaySensors(sensors) {
              const container = document.getElementById("sensors-container");
              container.innerHTML = "";

              if (sensors.length === 0) {
                container.innerHTML = `
          <div style="grid-column: 1 / -1; text-align: center; padding: 40px;">
            <i class="fas fa-search" style="font-size: 48px; color: #ddd; margin-bottom: 16px;"></i>
            <p>No sensors match your filter criteria.</p>
          </div>
        `;
                return;
              }

              sensors.forEach((sensor) => {
                const statusClass = `status-${sensor.status}`;
                const sensorIcon = getSensorIcon(sensor.type);

                const card = document.createElement("div");
                card.className = "sensor-card";
                card.innerHTML = `
          <div class="sensor-header">
            <h3 class="sensor-title">
              <i class="${sensorIcon}"></i>
              ${sensor.name}
            </h3>
            <span class="sensor-status ${statusClass}">
              ${capitalizeFirstLetter(sensor.status)}
            </span>
          </div>
          <div class="sensor-body">
            <div class="sensor-info">
              <div class="info-item">
                <span class="info-label">Sensor ID</span>
                <span class="info-value">${sensor.id}</span>
              </div>
              <div class="info-item">
                <span class="info-label">Type</span>
                <span class="info-value">${capitalizeFirstLetter(
                  sensor.type
                )}</span>
              </div>
              <div class="info-item">
                <span class="info-label">Location</span>
                <span class="info-value">${formatLocation(
                  sensor.location
                )}</span>
              </div>
              <div class="info-item">
                <span class="info-label">Battery</span>
                <span class="info-value">${sensor.battery}</span>
              </div>
              <div class="info-item">
                <span class="info-label">Last Reading</span>
                <span class="info-value">${sensor.lastReading}</span>
              </div>
              <div class="info-item">
                <span class="info-label">Last Update</span>
                <span class="info-value">${formatDate(sensor.lastUpdate)}</span>
              </div>
            </div>
          </div>
          <div class="sensor-footer">
            <button class="sensor-action edit-btn" data-id="${sensor.id}">
              <i class="fas fa-edit"></i> Edit
            </button>
            <button class="sensor-action delete-btn" data-id="${sensor.id}">
              <i class="fas fa-trash-alt"></i> Delete
            </button>
          </div>
        `;

                // Add event listeners to buttons
                container.appendChild(card);

                // Attach event listeners to buttons inside the newly created card
                card
                  .querySelector(".edit-btn")
                  .addEventListener("click", () => {
                    openModal(sensor);
                  });

                card
                  .querySelector(".delete-btn")
                  .addEventListener("click", () => {
                    deleteSensor(sensor.id);
                  });
              });
            }

            // Filter sensors based on selected filters
            function filterSensors() {
              const typeFilter = document.getElementById("type-filter").value;
              const locationFilter =
                document.getElementById("location-filter").value;
              const statusFilter =
                document.getElementById("status-filter").value;
              const searchText = document
                .getElementById("search")
                .value.toLowerCase();

              const filteredSensors = sensorData.filter((sensor) => {
                // Check type filter
                if (typeFilter !== "all" && sensor.type !== typeFilter)
                  return false;

                // Check location filter
                if (
                  locationFilter !== "all" &&
                  sensor.location !== locationFilter
                )
                  return false;

                // Check status filter
                if (statusFilter !== "all" && sensor.status !== statusFilter)
                  return false;

                // Check search text
                if (
                  searchText &&
                  !sensor.id.toLowerCase().includes(searchText) &&
                  !sensor.name.toLowerCase().includes(searchText)
                )
                  return false;

                return true;
              });

              displaySensors(filteredSensors);
              setupPagination(filteredSensors);
            }

            // Open modal for adding or editing a sensor
            function openModal(sensor = null) {
              const modal = document.getElementById("sensor-modal");
              const modalTitle = document.getElementById("modal-title");
              const form = document.getElementById("sensor-form");

              // Clear form
              form.reset();

              if (sensor) {
                // Edit existing sensor
                modalTitle.textContent = "Edit Sensor";
                document.getElementById("sensor-id").value = sensor.id;
                document.getElementById("sensor-name").value = sensor.name;
                document.getElementById("sensor-type").value = sensor.type;
                document.getElementById("sensor-location").value =
                  sensor.location;
                document.getElementById("sensor-status").value = sensor.status;
                document.getElementById("sensor-interval").value =
                  sensor.interval;
                document.getElementById("sensor-threshold").value =
                  sensor.threshold;
              } else {
                // Add new sensor
                modalTitle.textContent = "Add New Sensor";
                document.getElementById("sensor-id").value = generateSensorId();
              }

              modal.style.display = "block";
            }

            // Save sensor (add new or update existing)
            function saveSensor() {
              const id = document.getElementById("sensor-id").value;
              const name = document.getElementById("sensor-name").value;
              const type = document.getElementById("sensor-type").value;
              const location = document.getElementById("sensor-location").value;
              const status = document.getElementById("sensor-status").value;
              const interval = parseInt(
                document.getElementById("sensor-interval").value
              );
              const threshold = parseFloat(
                document.getElementById("sensor-threshold").value
              );

              // Check if this is a new sensor or an update
              const existingSensorIndex = sensorData.findIndex(
                (s) => s.id === id
              );

              if (existingSensorIndex !== -1) {
                // Update existing sensor
                sensorData[existingSensorIndex] = {
                  ...sensorData[existingSensorIndex],
                  name,
                  type,
                  location,
                  status,
                  interval,
                  threshold,
                };
              } else {
                // Add new sensor
                const newSensor = {
                  id,
                  name,
                  type,
                  location,
                  status,
                  interval,
                  threshold,
                  lastReading: getDefaultReading(type),
                  lastUpdate: new Date().toISOString(),
                  battery: "100%",
                };

                sensorData.unshift(newSensor);
              }

              // Close modal, refresh display
              document.getElementById("sensor-modal").style.display = "none";
              filterSensors();

              // Show success notification
              showNotification(
                existingSensorIndex !== -1
                  ? "Sensor updated successfully!"
                  : "New sensor added successfully!"
              );
            }

            // Delete a sensor
            function deleteSensor(id) {
              if (confirm("Are you sure you want to delete this sensor?")) {
                const index = sensorData.findIndex((s) => s.id === id);
                if (index !== -1) {
                  sensorData.splice(index, 1);
                  filterSensors();
                  showNotification("Sensor deleted successfully!");
                }
              }
            }

            // Simple notification function
            function showNotification(message) {
              // Create notification element
              const notification = document.createElement("div");
              notification.style.position = "fixed";
              notification.style.bottom = "20px";
              notification.style.right = "20px";
              notification.style.backgroundColor = "#1e3c72";
              notification.style.color = "white";
              notification.style.padding = "12px 20px";
              notification.style.borderRadius = "5px";
              notification.style.boxShadow = "0 4px 10px rgba(0,0,0,0.1)";
              notification.style.zIndex = "1000";
              notification.style.transition = "opacity 0.3s";
              notification.textContent = message;

              // Add to body
              document.body.appendChild(notification);

              // Remove after 3 seconds
              setTimeout(() => {
                notification.style.opacity = "0";
                setTimeout(() => {
                  document.body.removeChild(notification);
                }, 300);
              }, 3000);
            }

            // Helper function to format location
            function formatLocation(location) {
              return location
                .split("-")
                .map((word) => capitalizeFirstLetter(word))
                .join(" ");
            }

            // Helper function to capitalize first letter
            function capitalizeFirstLetter(string) {
              return string.charAt(0).toUpperCase() + string.slice(1);
            }

            // Helper function to format date
            function formatDate(dateString) {
              const date = new Date(dateString);
              return date.toLocaleString();
            }

            // Helper function to get sensor icon based on type
            function getSensorIcon(type) {
              const icons = {
                temperature: "fas fa-thermometer-half",
                humidity: "fas fa-tint",
                motion: "fas fa-running",
                pressure: "fas fa-compress-alt",
                light: "fas fa-lightbulb",
              };

              return icons[type] || "fas fa-microchip";
            }

            // Helper function to generate a new sensor ID
            function generateSensorId() {
              const types = {
                temperature: "TEMP",
                humidity: "HUM",
                motion: "MOT",
                pressure: "PRESS",
                light: "LIGHT",
              };

              const type = document.getElementById("sensor-type").value;
              const prefix = types[type] || "SENS";

              // Find the highest ID number for this type
              const regex = new RegExp(`^${prefix}(\\d+)$`);
              let highestNum = 0;

              sensorData.forEach((sensor) => {
                const match = sensor.id.match(regex);
                if (match) {
                  const num = parseInt(match[1]);
                  if (num > highestNum) highestNum = num;
                }
              });

              // Generate new ID with next number, padded to 3 digits
              return `${prefix}${String(highestNum + 1).padStart(3, "0")}`;
            }

            // Helper function to get default reading based on sensor type
            function getDefaultReading(type) {
              switch (type) {
                case "temperature":
                  return "22.0°C";
                case "humidity":
                  return "50%";
                case "motion":
                  return "No motion";
                case "pressure":
                  return "101.3 kPa";
                case "light":
                  return "500 lux";
                default:
                  return "N/A";
              }
            }

            // Setup pagination
            function setupPagination(sensors) {
              const paginationContainer = document.getElementById("pagination");
              paginationContainer.innerHTML = "";

              // Simple pagination for demonstration
              if (sensors.length > 0) {
                const prevButton = document.createElement("button");
                prevButton.innerHTML = '<i class="fas fa-chevron-left"></i>';
                prevButton.addEventListener("click", () => {
                  // Previous page logic would go here
                });
                paginationContainer.appendChild(prevButton);

                const pageButton = document.createElement("button");
                pageButton.textContent = "1";
                pageButton.classList.add("active");
                paginationContainer.appendChild(pageButton);

                const nextButton = document.createElement("button");
                nextButton.innerHTML = '<i class="fas fa-chevron-right"></i>';
                nextButton.addEventListener("click", () => {
                  // Next page logic would go here
                });
                paginationContainer.appendChild(nextButton);
              }
            }

            // Initialize the page
            initSensorManagement();
          </script>
        </body>
      </html>
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-auth.js"></script>
    <script type="module">
      import { initializeApp } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-app.js";
      import {
        getAuth,
        onAuthStateChanged,
        signOut,
      } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-auth.js";

      // Firebase Configuration
      const firebaseConfig = {
        apiKey: "AIzaSyCvHiTAGdlMaH2WNb4LmxlUMJ9BIwNxF_g",
        authDomain: "bms-exsel.firebaseapp.com",
        projectId: "bms-exsel",
        storageBucket: "bms-exsel.appspot.com",
        messagingSenderId: "950039193184",
        appId: "1:950039193184:web:f97fc79d5798ab3f628505",
        measurementId: "G-L8S1N8Q0CD",
      };

      // Initialize Firebase
      const app = initializeApp(firebaseConfig);
      const auth = getAuth(app);

      // Function to Update User Profile
      function updateUserProfile(user) {
        if (!user) return;

        console.log("Updating User Profile:", user); // Debugging Step

        const userName = user.displayName || "User";
        const userProfilePicture =
          user.photoURL || "https://via.placeholder.com/40"; // Default image

        // Update UI Elements
        document.getElementById("user-name").textContent = userName;
        document.querySelector(
          ".user-avatar"
        ).innerHTML = `<img src="${userProfilePicture}" alt="User Avatar">`;
      }

      // Load User Profile on Authentication State Change
      onAuthStateChanged(auth, (user) => {
        if (user) {
          console.log("User Logged In:", user);
          updateUserProfile(user);
        } else {
          console.warn("User not logged in, redirecting...");
          window.location.href = "{{ url_for('home') }}";
        }
      });

      // Toggle dropdown when clicking on user profile
      document.querySelector(".user-profile").addEventListener("click", (e) => {
        e.stopPropagation(); // Prevent event from bubbling
        document.querySelector(".dropdown-menu").classList.toggle("active");
      });

      // Close dropdown when clicking outside
      document.addEventListener("click", (e) => {
        const dropdown = document.querySelector(".dropdown-menu");
        const userProfile = document.querySelector(".user-profile");

        if (!userProfile.contains(e.target)) {
          dropdown.classList.remove("active");
        }
      });
      function loadPage(pageUrl) {
        const mainContent = document.getElementById("main-content");

        mainContent.innerHTML = `
    <div style="text-align: center; padding: 20px;">
      <i class="fas fa-spinner fa-spin fa-2x"></i>
      <p>Loading...</p>
    </div>`;

        fetch(pageUrl)
          .then((response) => response.text())
          .then((html) => {
            mainContent.innerHTML = html;

            // Re-run Firebase authentication after loading new content
            onAuthStateChanged(auth, (user) => {
              if (user) {
                updateUserProfile(user);
              }
            });

            // Extract and execute new scripts
            mainContent.querySelectorAll("script").forEach((oldScript) => {
              const newScript = document.createElement("script");
              newScript.textContent = oldScript.textContent;
              document.body.appendChild(newScript);
            });
          })
          .catch((error) => console.error("Error loading page:", error));
      }

      // Attach navigation event listeners
      document.querySelectorAll(".nav-item").forEach((item) => {
        item.addEventListener("click", function (event) {
          event.preventDefault();
          const pageUrl = this.getAttribute("href");
          loadPage(pageUrl);
        });
      });

      // Logout Function
      document
        .getElementById("logout-btn")
        .addEventListener("click", logoutUser);

      function logoutUser() {
        signOut(auth)
          .then(() => {
            console.log("User signed out.");
            window.location.href = "{{ url_for('home') }}";
          })
          .catch((error) => {
            console.error("Logout Error:", error);
          });
      }
    </script>
  </body>
</html>
