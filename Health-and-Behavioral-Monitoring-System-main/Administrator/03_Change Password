<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Favicon -->
    <link
      rel="icon"
      type="image/x-icon"
      href="{{ url_for('static', filename='/images/HBMS.ico') }}"
    />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HBMS - Dashboard</title>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      }

      :root {
        --sidebar-width: 250px;
        --header-height: 70px;
        --primary-color: #1e3c72;
        --secondary-color: #ff7e5f;
        --hover-color: #2a5298;
      }

      body {
        min-height: 100vh;
        background: #f5f7fa;
      }

      .sidebar {
        position: fixed;
        left: 0;
        top: 0;
        bottom: 0;
        width: var(--sidebar-width);
        background: var(--primary-color);
        color: white;
        transition: 0.3s;
        z-index: 1000;
        display: flex;
        flex-direction: column;
        overflow-y: auto; /* Enables scrolling for menu items */
        overflow-x: hidden; /* Prevents horizontal scrolling */
        max-height: 100vh; /* Keeps sidebar within viewport height */
        scrollbar-width: thin; /* Makes scrollbar thinner */
        scrollbar-color: #ccc transparent; /* Custom scrollbar colors */
      }

      /* Optional: Style the scrollbar for WebKit browsers */
      .sidebar::-webkit-scrollbar {
        width: 6px;
      }

      .sidebar::-webkit-scrollbar-thumb {
        background-color: #888; /* Scrollbar color */
        border-radius: 5px;
      }

      .sidebar::-webkit-scrollbar-thumb:hover {
        background-color: #555; /* Darker on hover */
      }

      /* Ensure the content inside the sidebar doesn't overflow */
      .sidebar nav {
        display: flex;
        flex-direction: column;
        overflow-x: hidden; /* Extra safety */
      }

      .nav-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 10px;
        color: white;
        text-decoration: none; /* Removes underline */
        border-radius: 5px;
        transition: 0.3s;
        cursor: pointer;
      }

      .nav-item:hover {
        background-color: #2a5298;
      }

      .nav-item.active {
        background-color: #ff7e5f;
      }

      /* Ensure all nested elements inside links also inherit no underline */
      .nav-item i,
      .nav-item span {
        text-decoration: none; /* Ensures icons and text don't get underlined */
      }

      .sidebar-header {
        position: sticky;
        top: 0;
        background: var(--primary-color);
        z-index: 1001; /* Ensures it stays above scrolling content */
        padding: 1rem 0;
        text-align: center;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .sidebar-header img {
        width: 140px; /* Adjust width */
        max-width: 100%;
        height: auto; /* Maintain aspect ratio */
        display: block; /* Remove extra space */
        margin: 0 auto; /* Center the image */
      }

      /* Header Styles */
      .header {
        position: fixed;
        right: 0;
        top: 0;
        left: var(--sidebar-width);
        height: var(--header-height);
        background: white;
        padding: 1rem 2rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        z-index: 999;
      }

      /* Main Content Area */
      .main-content {
        margin-left: var(--sidebar-width);
        padding-top: var(--header-height);
        padding: calc(var(--header-height) + 20px) 20px 20px;
        min-height: 100vh;
      }

      .search-bar {
        display: flex;
        align-items: center;
        background: #ffffff;
        border-radius: 25px;
        padding: 8px 15px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        width: 300px;
        transition: all 0.3s ease-in-out;
        border: 1px solid #ccc;
        position: relative;
      }

      .search-bar i {
        font-size: 16px;
        color: #666;
        position: absolute;
        left: 12px; /* Adjust icon position inside the box */
      }

      .search-bar input {
        border: none;
        outline: none;
        font-size: 16px;
        padding: 8px 10px 8px 35px; /* Left padding to prevent overlap */
        width: 100%;
        background: transparent;
        border-radius: 25px;
      }

      .search-bar:hover {
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
      }
      .user-profile {
        display: flex;
        align-items: center;
        gap: 1rem;
        cursor: pointer;
      }

      .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: var(--primary-color);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
      }
      .user-avatar img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }
      /* Dropdown Styles */
      .profile-dropdown {
        position: absolute;
        top: 70px; /* Adjust to match header height */
        right: 20px;
        background: white;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        width: 200px;
        padding: 15px;
        display: none; /* Initially Hidden */
        z-index: 1000;
      }

      .profile-header {
        text-align: center;
        margin-bottom: 10px;
      }

      .profile-header img {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        margin-bottom: 5px;
      }

      .profile-header h4 {
        font-size: 16px;
        color: #333;
      }

      .profile-dropdown button {
        width: 100%;
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        margin: 5px 0;
        transition: background 0.3s;
      }

      .profile-dropdown button:hover {
        background: var(--hover-color);
      }

      .dropdown-menu {
        position: absolute;
        top: 100%;
        right: 0;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        width: 200px;
        display: none;
        z-index: 1000;
        margin-top: 10px;
        border: 1px solid #eee;
      }

      .dropdown-menu.active {
        display: block;
      }

      .dropdown-item {
        padding: 12px 16px;
        display: flex;
        align-items: center;
        gap: 10px;
        color: #333;
        text-decoration: none;
        transition: background-color 0.2s;
      }

      .dropdown-item:first-child {
        border-radius: 8px 8px 0 0;
      }

      .dropdown-item:last-child {
        border-radius: 0 0 8px 8px;
      }

      .dropdown-item:hover {
        background-color: #f5f7fa;
      }

      .dropdown-item i {
        width: 16px;
        color: var(--primary-color);
      }

      /* Add arrow to dropdown */
      .dropdown-menu::before {
        content: "";
        position: absolute;
        top: -8px;
        right: 20px;
        width: 16px;
        height: 16px;
        background: white;
        transform: rotate(45deg);
        border-left: 1px solid #eee;
        border-top: 1px solid #eee;
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        .sidebar {
          transform: translateX(-100%);
        }

        .header {
          left: 0;
        }

        .main-content {
          margin-left: 0;
        }

        .sidebar.active {
          transform: translateX(0);
        }
      }

      .change-password-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
      }

      .change-password-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        overflow: hidden;
      }

      .card-header {
        background: var(--primary-color);
        color: white;
        padding: 20px 25px;
      }

      .card-header h2 {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 5px;
        font-size: 1.5rem;
      }

      .card-header p {
        opacity: 0.8;
        margin: 0;
      }

      .card-body {
        padding: 25px;
      }

      .form-group {
        margin-bottom: 20px;
      }

      .form-group label {
        display: block;
        margin-bottom: 6px;
        font-weight: 500;
        color: #444;
      }

      .form-control {
        width: 100%;
        padding: 12px 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 15px;
        transition: all 0.3s;
      }

      .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(30, 60, 114, 0.2);
        outline: none;
      }

      .password-input-container {
        position: relative;
      }

      .toggle-password {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #888;
        cursor: pointer;
        transition: all 0.2s;
      }

      .toggle-password:hover {
        color: var(--primary-color);
      }

      .password-strength {
        margin-top: 8px;
      }

      .strength-meter {
        height: 6px;
        background: #eee;
        border-radius: 3px;
        margin-bottom: 5px;
        overflow: hidden;
      }

      .strength-bar {
        height: 100%;
        width: 0;
        background: #ccc;
        border-radius: 3px;
        transition: all 0.3s;
      }

      #strength-text {
        font-size: 13px;
        color: #777;
      }

      .weak {
        background-color: #ff4d4d;
        width: 25%;
      }
      .medium {
        background-color: #ffbb33;
        width: 50%;
      }
      .strong {
        background-color: #00cc66;
        width: 75%;
      }
      .very-strong {
        background-color: #00ad5f;
        width: 100%;
      }

      .match-message {
        font-size: 13px;
        margin-top: 5px;
        height: 18px;
      }

      .match-error {
        color: #ff4d4d;
      }

      .match-success {
        color: #00cc66;
      }

      .password-requirements {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px 20px;
        margin: 20px 0;
      }

      .password-requirements h4 {
        font-size: 14px;
        margin-bottom: 8px;
        color: #444;
      }

      .password-requirements ul {
        list-style: none;
        padding: 0;
        margin: 0;
      }

      .password-requirements li {
        margin-bottom: 5px;
        font-size: 13px;
        color: #666;
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .password-requirements li i {
        font-size: 8px;
        color: #ccc;
      }

      .password-requirements li.valid i {
        color: #00cc66;
      }

      .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 15px;
        margin-top: 25px;
      }

      .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s;
      }

      .btn-primary {
        background-color: var(--primary-color);
        color: white;
      }

      .btn-primary:hover {
        background-color: var(--hover-color);
      }

      .btn-secondary {
        background-color: #e2e6ea;
        color: #444;
      }

      .btn-secondary:hover {
        background-color: #d2d6da;
      }

      .alert {
        padding: 12px 15px;
        border-radius: 5px;
        margin-bottom: 20px;
        font-size: 14px;
      }

      .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }

      .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }

      /* Responsive adjustments */
      @media (max-width: 768px) {
        .change-password-container {
          padding: 10px;
        }

        .form-actions {
          flex-direction: column;
        }

        .btn {
          width: 100%;
        }
      }
    </style>
  </head>
  <body>
    <!-- Sidebar -->
    <div class="sidebar">
      <div class="sidebar-header">
        <img src="static/images/HBMS.png" alt="Logo" />
        <h3>BMS Dashboard</h3>
      </div>
      <nav>
        <a href="/home" class="nav-item">
          <i class="fas fa-home"></i>
          <span>Home</span>
        </a>
        <a href="/live-monitoring" class="nav-item">
          <i class="fas fa-video"></i>
          <span>Live Monitoring</span>
        </a>
        <a href="/analytics" class="nav-item">
          <i class="fas fa-chart-line"></i>
          <span>Analytics</span>
        </a>
        <a href="/notifications" class="nav-item">
          <i class="fas fa-bell"></i>
          <span>Notifications</span>
        </a>
        <a href="/reports" class="nav-item">
          <i class="fas fa-file-alt"></i>
          <span>Reports</span>
        </a>
        <a href="/appointments" class="nav-item">
          <i class="fas fa-calendar-check"></i>
          <span>Appointments</span>
        </a>
        <a href="/chat" class="nav-item">
          <i class="fas fa-robot"></i>
          <span>AI Chat Assistance</span>
        </a>
        <a href="/education" class="nav-item">
          <i class="fas fa-book-medical"></i>
          <span>Health Education</span>
        </a>
        <a href="/sensor-management" class="nav-item">
          <i class="fas fa-microchip"></i>
          <span>Sensor Management</span>
        </a>
        <a href="/user-management" class="nav-item">
          <i class="fas fa-users"></i>
          <span>User Management</span>
        </a>

        <a href="/professional-about-us-page" class="nav-item">
          <i class="fas fa-info-circle"></i>
          <span>About Us</span>
        </a>
        <a href="/feedback" class="nav-item">
          <i class="fas fa-comment-dots"></i>
          <span>Feedback</span>
        </a>
        <a href="/change-password" class="nav-item active">
          <i class="fas fa-key"></i>
          <span>Change Password</span>
        </a>
        <a href="#" class="nav-item" id="logout-btn">
          <i class="fas fa-sign-out-alt"></i>
          <span>Logout</span>
        </a>
      </nav>
    </div>

    <header class="header">
      <div class="search-bar">
        <i class="fas fa-search"></i>
        <input type="text" placeholder="Search..." />
      </div>
      <div class="user-profile">
        <div class="notifications">
          <i class="fas fa-bell"></i>
        </div>
        <div class="user-avatar">
          <!-- Profile picture will be inserted dynamically -->
        </div>
        <div class="user-info">
          <h4 id="user-name">Loading...</h4>
        </div>
        <!-- Add Dropdown Menu -->
        <div class="dropdown-menu">
          <a
            href="#"
            class="dropdown-item"
            id="update-profile-btn"
            data-page="/firebase-profile-update"
          >
            <i class="fas fa-user"></i>
            Update Profile
          </a>
          <a href="#" class="dropdown-item" id="logout-btn">
            <i class="fas fa-sign-out-alt"></i>
            Logout
          </a>
        </div>
      </div>
    </header>

    <!-- Main Content Area -->
    <div id="main-content" class="main-content">
      <div class="change-password-container">
        <div class="change-password-card">
          <div class="card-header">
            <h2><i class="fas fa-key"></i> Change Password</h2>
            <p>Update your account password</p>
          </div>

          <div class="card-body">
            <div id="password-alert" class="alert" style="display: none"></div>

            <form id="changePasswordForm">
              <div class="form-group">
                <label for="currentPassword">Current Password</label>
                <div class="password-input-container">
                  <input
                    type="password"
                    id="currentPassword"
                    class="form-control"
                    required
                  />
                  <i
                    class="fas fa-eye toggle-password"
                    data-target="currentPassword"
                  ></i>
                </div>
              </div>

              <div class="form-group">
                <label for="newPassword">New Password</label>
                <div class="password-input-container">
                  <input
                    type="password"
                    id="newPassword"
                    class="form-control"
                    required
                  />
                  <i
                    class="fas fa-eye toggle-password"
                    data-target="newPassword"
                  ></i>
                </div>
                <div class="password-strength">
                  <div class="strength-meter">
                    <div class="strength-bar" id="strength-bar"></div>
                  </div>
                  <span id="strength-text">Password strength</span>
                </div>
              </div>

              <div class="form-group">
                <label for="confirmPassword">Confirm New Password</label>
                <div class="password-input-container">
                  <input
                    type="password"
                    id="confirmPassword"
                    class="form-control"
                    required
                  />
                  <i
                    class="fas fa-eye toggle-password"
                    data-target="confirmPassword"
                  ></i>
                </div>
                <div id="password-match" class="match-message"></div>
              </div>

              <div class="password-requirements">
                <h4>Password must:</h4>
                <ul>
                  <li id="length-check">
                    <i class="fas fa-circle"></i> Be at least 8 characters long
                  </li>
                  <li id="uppercase-check">
                    <i class="fas fa-circle"></i> Include at least one uppercase
                    letter
                  </li>
                  <li id="lowercase-check">
                    <i class="fas fa-circle"></i> Include at least one lowercase
                    letter
                  </li>
                  <li id="number-check">
                    <i class="fas fa-circle"></i> Include at least one number
                  </li>
                  <li id="special-check">
                    <i class="fas fa-circle"></i> Include at least one special
                    character
                  </li>
                </ul>
              </div>

              <div class="form-actions">
                <button type="button" id="cancel-btn" class="btn btn-secondary">
                  Cancel
                </button>
                <button type="submit" id="update-btn" class="btn btn-primary">
                  Update Password
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-auth.js"></script>
    <script type="module">
      import { initializeApp } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-app.js";
      import {
        getAuth,
        updatePassword,
        EmailAuthProvider,
        reauthenticateWithCredential,
        onAuthStateChanged,
        signOut,
      } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-auth.js";

      // Firebase Configuration
      const firebaseConfig = {
        apiKey: "AIzaSyCvHiTAGdlMaH2WNb4LmxlUMJ9BIwNxF_g",
        authDomain: "bms-exsel.firebaseapp.com",
        projectId: "bms-exsel",
        storageBucket: "bms-exsel.appspot.com",
        messagingSenderId: "950039193184",
        appId: "1:950039193184:web:f97fc79d5798ab3f628505",
        measurementId: "G-L8S1N8Q0CD",
      };

      // Initialize Firebase
      const app = initializeApp(firebaseConfig);
      const auth = getAuth(app);

      // Function to Update User Profile
      function updateUserProfile(user) {
        if (!user) return;

        console.log("Updating User Profile:", user); // Debugging Step

        const userName = user.displayName || "User";
        const userProfilePicture =
          user.photoURL || "https://via.placeholder.com/40"; // Default image

        // Update UI Elements
        document.getElementById("user-name").textContent = userName;
        document.querySelector(
          ".user-avatar"
        ).innerHTML = `<img src="${userProfilePicture}" alt="User Avatar">`;
      }

      // Load User Profile on Authentication State Change
      onAuthStateChanged(auth, (user) => {
        if (user) {
          console.log("User Logged In:", user);
          updateUserProfile(user);
        } else {
          console.warn("User not logged in, redirecting...");
          window.location.href = "{{ url_for('home') }}";
        }
      });

      // Toggle dropdown when clicking on user profile
      document.querySelector(".user-profile").addEventListener("click", (e) => {
        e.stopPropagation(); // Prevent event from bubbling
        document.querySelector(".dropdown-menu").classList.toggle("active");
      });

      // Close dropdown when clicking outside
      document.addEventListener("click", (e) => {
        const dropdown = document.querySelector(".dropdown-menu");
        const userProfile = document.querySelector(".user-profile");

        if (!userProfile.contains(e.target)) {
          dropdown.classList.remove("active");
        }
      });

      // Logout Function
      document
        .getElementById("logout-btn")
        .addEventListener("click", logoutUser);

      function logoutUser() {
        signOut(auth)
          .then(() => {
            console.log("User signed out.");
            window.location.href = "{{ url_for('home') }}";
          })
          .catch((error) => {
            console.error("Logout Error:", error);
          });
      }

      document.addEventListener("DOMContentLoaded", function () {
        // Get all password toggle buttons
        const toggleButtons = document.querySelectorAll(".toggle-password");

        // Add click event to toggle password visibility
        toggleButtons.forEach((button) => {
          button.addEventListener("click", function () {
            const targetId = this.getAttribute("data-target");
            const inputField = document.getElementById(targetId);

            // Toggle password visibility
            if (inputField.type === "password") {
              inputField.type = "text";
              this.classList.remove("fa-eye");
              this.classList.add("fa-eye-slash");
            } else {
              inputField.type = "password";
              this.classList.remove("fa-eye-slash");
              this.classList.add("fa-eye");
            }
          });
        });

        // Password strength checker
        const newPassword = document.getElementById("newPassword");
        const confirmPassword = document.getElementById("confirmPassword");
        const strengthBar = document.getElementById("strength-bar");
        const strengthText = document.getElementById("strength-text");
        const passwordMatch = document.getElementById("password-match");

        // Password requirement checkers
        const lengthCheck = document.getElementById("length-check");
        const uppercaseCheck = document.getElementById("uppercase-check");
        const lowercaseCheck = document.getElementById("lowercase-check");
        const numberCheck = document.getElementById("number-check");
        const specialCheck = document.getElementById("special-check");

        // Function to check password strength
        function checkPasswordStrength(password) {
          let strength = 0;

          // Reset all checks
          [
            lengthCheck,
            uppercaseCheck,
            lowercaseCheck,
            numberCheck,
            specialCheck,
          ].forEach((check) => {
            check.classList.remove("valid");
          });

          // Check length
          if (password.length >= 8) {
            strength += 1;
            lengthCheck.classList.add("valid");
            lengthCheck.querySelector("i").classList.remove("fa-circle");
            lengthCheck.querySelector("i").classList.add("fa-check-circle");
          } else {
            lengthCheck.querySelector("i").classList.remove("fa-check-circle");
            lengthCheck.querySelector("i").classList.add("fa-circle");
          }

          // Check for uppercase letters
          if (/[A-Z]/.test(password)) {
            strength += 1;
            uppercaseCheck.classList.add("valid");
            uppercaseCheck.querySelector("i").classList.remove("fa-circle");
            uppercaseCheck.querySelector("i").classList.add("fa-check-circle");
          } else {
            uppercaseCheck
              .querySelector("i")
              .classList.remove("fa-check-circle");
            uppercaseCheck.querySelector("i").classList.add("fa-circle");
          }

          // Check for lowercase letters
          if (/[a-z]/.test(password)) {
            strength += 1;
            lowercaseCheck.classList.add("valid");
            lowercaseCheck.querySelector("i").classList.remove("fa-circle");
            lowercaseCheck.querySelector("i").classList.add("fa-check-circle");
          } else {
            lowercaseCheck
              .querySelector("i")
              .classList.remove("fa-check-circle");
            lowercaseCheck.querySelector("i").classList.add("fa-circle");
          }

          // Check for numbers
          if (/[0-9]/.test(password)) {
            strength += 1;
            numberCheck.classList.add("valid");
            numberCheck.querySelector("i").classList.remove("fa-circle");
            numberCheck.querySelector("i").classList.add("fa-check-circle");
          } else {
            numberCheck.querySelector("i").classList.remove("fa-check-circle");
            numberCheck.querySelector("i").classList.add("fa-circle");
          }

          // Check for special characters
          if (/[^A-Za-z0-9]/.test(password)) {
            strength += 1;
            specialCheck.classList.add("valid");
            specialCheck.querySelector("i").classList.remove("fa-circle");
            specialCheck.querySelector("i").classList.add("fa-check-circle");
          } else {
            specialCheck.querySelector("i").classList.remove("fa-check-circle");
            specialCheck.querySelector("i").classList.add("fa-circle");
          }

          // Update strength meter
          strengthBar.className = "strength-bar";

          if (password.length === 0) {
            strengthBar.style.width = "0";
            strengthText.textContent = "Password strength";
          } else if (strength <= 2) {
            strengthBar.classList.add("weak");
            strengthText.textContent = "Weak password";
            strengthText.style.color = "#ff4d4d";
          } else if (strength === 3) {
            strengthBar.classList.add("medium");
            strengthText.textContent = "Medium password";
            strengthText.style.color = "#ffbb33";
          } else if (strength === 4) {
            strengthBar.classList.add("strong");
            strengthText.textContent = "Strong password";
            strengthText.style.color = "#00cc66";
          } else {
            strengthBar.classList.add("very-strong");
            strengthText.textContent = "Very strong password";
            strengthText.style.color = "#00ad5f";
          }
        }

        // Check if passwords match
        function checkPasswordMatch() {
          if (confirmPassword.value.length > 0) {
            if (newPassword.value === confirmPassword.value) {
              passwordMatch.classList.add("match-success");
              passwordMatch.classList.remove("match-error");
              passwordMatch.textContent = "Passwords match";
            } else {
              passwordMatch.classList.add("match-error");
              passwordMatch.classList.remove("match-success");
              passwordMatch.textContent = "Passwords do not match";
            }
          } else {
            passwordMatch.textContent = "";
          }
        }

        // Add event listeners
        newPassword.addEventListener("input", function () {
          checkPasswordStrength(this.value);
          if (confirmPassword.value.length > 0) {
            checkPasswordMatch();
          }
        });

        confirmPassword.addEventListener("input", checkPasswordMatch);

        // Form submission
        const changePasswordForm =
          document.getElementById("changePasswordForm");
        const passwordAlert = document.getElementById("password-alert");

        changePasswordForm.addEventListener("submit", function (e) {
          e.preventDefault();

          const currentPassword =
            document.getElementById("currentPassword").value;
          const newPasswordValue = newPassword.value;
          const confirmPasswordValue = confirmPassword.value;

          // Validate all fields are filled
          if (!currentPassword || !newPasswordValue || !confirmPasswordValue) {
            showAlert("Please fill all fields", "danger");
            return;
          }

          // Check if passwords match
          if (newPasswordValue !== confirmPasswordValue) {
            showAlert("New passwords do not match", "danger");
            return;
          }

          // Check if new password meets requirements
          const isStrongPassword =
            newPasswordValue.length >= 8 &&
            /[A-Z]/.test(newPasswordValue) &&
            /[a-z]/.test(newPasswordValue) &&
            /[0-9]/.test(newPasswordValue) &&
            /[^A-Za-z0-9]/.test(newPasswordValue);

          if (!isStrongPassword) {
            showAlert("Password does not meet all requirements", "danger");
            return;
          }

          // Here you would normally connect to Firebase to update the password
          // For this demo, we'll just show a success message
          showAlert("Password updated successfully!", "success");

          // Add Firebase password update logic
          // Example Firebase password update code
          const auth = getAuth();
          const user = auth.currentUser;

          // First reauthenticate the user
          const credential = EmailAuthProvider.credential(
            user.email,
            currentPassword
          );

          reauthenticateWithCredential(user, credential)
            .then(() => {
              // User re-authenticated, now update the password
              updatePassword(user, newPasswordValue)
                .then(() => {
                  showAlert("Password updated successfully!", "success");
                  setTimeout(() => {
                    changePasswordForm.reset();
                  }, 2000);
                })
                .catch((error) => {
                  showAlert(
                    "Error updating password: " + error.message,
                    "danger"
                  );
                });
            })
            .catch((error) => {
              showAlert("Current password is incorrect", "danger");
            });
        });

        // Cancel button
        const cancelBtn = document.getElementById("cancel-btn");
        cancelBtn.addEventListener("click", function () {
          // Clear form and return to previous page
          changePasswordForm.reset();
          window.history.back();
        });

        // Function to show alerts
        function showAlert(message, type) {
          passwordAlert.textContent = message;
          passwordAlert.className = "alert";
          passwordAlert.classList.add("alert-" + type);
          passwordAlert.style.display = "block";

          // Auto-hide success messages after 3 seconds
          if (type === "success") {
            setTimeout(() => {
              passwordAlert.style.display = "none";
            }, 3000);
          }
        }
      });
    </script>
  </body>
</html>
