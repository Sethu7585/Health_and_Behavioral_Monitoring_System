<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Favicon -->
    <link
      rel="icon"
      type="image/x-icon"
      href="{{ url_for('static', filename='/images/HBMS.ico') }}"
    />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BMS - Dashboard</title>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      }

      :root {
        --sidebar-width: 250px;
        --header-height: 70px;
        --primary-color: #1e3c72;
        --secondary-color: #ff7e5f;
        --hover-color: #2a5298;
      }

      body {
        min-height: 100vh;
        background: #f5f7fa;
      }

      .sidebar {
        position: fixed;
        left: 0;
        top: 0;
        bottom: 0;
        width: var(--sidebar-width);
        background: var(--primary-color);
        color: white;
        transition: 0.3s;
        z-index: 1000;
        display: flex;
        flex-direction: column;
        overflow-y: auto; /* Enables scrolling for menu items */
        overflow-x: hidden; /* Prevents horizontal scrolling */
        max-height: 100vh; /* Keeps sidebar within viewport height */
        scrollbar-width: thin; /* Makes scrollbar thinner */
        scrollbar-color: #ccc transparent; /* Custom scrollbar colors */
      }

      /* Optional: Style the scrollbar for WebKit browsers */
      .sidebar::-webkit-scrollbar {
        width: 6px;
      }

      .sidebar::-webkit-scrollbar-thumb {
        background-color: #888; /* Scrollbar color */
        border-radius: 5px;
      }

      .sidebar::-webkit-scrollbar-thumb:hover {
        background-color: #555; /* Darker on hover */
      }

      /* Ensure the content inside the sidebar doesn't overflow */
      .sidebar nav {
        display: flex;
        flex-direction: column;
        overflow-x: hidden; /* Extra safety */
      }

      .nav-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 10px;
        color: white;
        text-decoration: none; /* Removes underline */
        border-radius: 5px;
        transition: 0.3s;
        cursor: pointer;
      }

      .nav-item:hover {
        background-color: #2a5298;
      }

      .nav-item.active {
        background-color: #ff7e5f;
      }

      /* Ensure all nested elements inside links also inherit no underline */
      .nav-item i,
      .nav-item span {
        text-decoration: none; /* Ensures icons and text don't get underlined */
      }

      .sidebar-header {
        position: sticky;
        top: 0;
        background: var(--primary-color);
        z-index: 1001; /* Ensures it stays above scrolling content */
        padding: 1rem 0;
        text-align: center;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .sidebar-header img {
        width: 140px; /* Adjust width */
        max-width: 100%;
        height: auto; /* Maintain aspect ratio */
        display: block; /* Remove extra space */
        margin: 0 auto; /* Center the image */
      }

      /* Header Styles */
      .header {
        position: fixed;
        right: 0;
        top: 0;
        left: var(--sidebar-width);
        height: var(--header-height);
        background: white;
        padding: 1rem 2rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        z-index: 999;
      }

      /* Main Content Area */
      .main-content {
        margin-left: var(--sidebar-width);
        padding-top: var(--header-height);
        padding: calc(var(--header-height) + 20px) 20px 20px;
        min-height: 100vh;
      }

      .search-bar {
        display: flex;
        align-items: center;
        background: #ffffff;
        border-radius: 25px;
        padding: 8px 15px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        width: 300px;
        transition: all 0.3s ease-in-out;
        border: 1px solid #ccc;
        position: relative;
      }

      .search-bar i {
        font-size: 16px;
        color: #666;
        position: absolute;
        left: 12px; /* Adjust icon position inside the box */
      }

      .search-bar input {
        border: none;
        outline: none;
        font-size: 16px;
        padding: 8px 10px 8px 35px; /* Left padding to prevent overlap */
        width: 100%;
        background: transparent;
        border-radius: 25px;
      }

      .search-bar:hover {
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
      }
      .user-profile {
        display: flex;
        align-items: center;
        gap: 1rem;
        cursor: pointer;
      }

      .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: var(--primary-color);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
      }
      .user-avatar img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }
      /* Dropdown Styles */
      .profile-dropdown {
        position: absolute;
        top: 70px; /* Adjust to match header height */
        right: 20px;
        background: white;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        width: 200px;
        padding: 15px;
        display: none; /* Initially Hidden */
        z-index: 1000;
      }

      .profile-header {
        text-align: center;
        margin-bottom: 10px;
      }

      .profile-header img {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        margin-bottom: 5px;
      }

      .profile-header h4 {
        font-size: 16px;
        color: #333;
      }

      .profile-dropdown button {
        width: 100%;
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        margin: 5px 0;
        transition: background 0.3s;
      }

      .profile-dropdown button:hover {
        background: var(--hover-color);
      }

      .dropdown-menu {
        position: absolute;
        top: 100%;
        right: 0;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        width: 200px;
        display: none;
        z-index: 1000;
        margin-top: 10px;
        border: 1px solid #eee;
      }

      .dropdown-menu.active {
        display: block;
      }

      .dropdown-item {
        padding: 12px 16px;
        display: flex;
        align-items: center;
        gap: 10px;
        color: #333;
        text-decoration: none;
        transition: background-color 0.2s;
      }

      .dropdown-item:first-child {
        border-radius: 8px 8px 0 0;
      }

      .dropdown-item:last-child {
        border-radius: 0 0 8px 8px;
      }

      .dropdown-item:hover {
        background-color: #f5f7fa;
      }

      .dropdown-item i {
        width: 16px;
        color: var(--primary-color);
      }

      /* Add arrow to dropdown */
      .dropdown-menu::before {
        content: "";
        position: absolute;
        top: -8px;
        right: 20px;
        width: 16px;
        height: 16px;
        background: white;
        transform: rotate(45deg);
        border-left: 1px solid #eee;
        border-top: 1px solid #eee;
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        .sidebar {
          transform: translateX(-100%);
        }

        .header {
          left: 0;
        }

        .main-content {
          margin-left: 0;
        }

        .sidebar.active {
          transform: translateX(0);
        }
      }
    </style>
  </head>
  <body>
    <!-- Sidebar -->
    <div class="sidebar">
      <div class="sidebar-header">
        <img src="static/images/HBMS.png" alt="Logo" />
        <h3>HBMS Dashboard</h3>
      </div>
      <nav>
        <a href="/home" class="nav-item">
          <i class="fas fa-home"></i>
          <span>Home</span>
        </a>
        <a href="/live-monitoring" class="nav-item">
          <i class="fas fa-video"></i>
          <span>Live Monitoring</span>
        </a>
        <a href="/analytics" class="nav-item">
          <i class="fas fa-chart-line"></i>
          <span>Analytics</span>
        </a>
        <a href="/notifications" class="nav-item">
          <i class="fas fa-bell"></i>
          <span>Notifications</span>
        </a>
        <a href="/reports" class="nav-item">
          <i class="fas fa-file-alt"></i>
          <span>Reports</span>
        </a>
        <a href="/appointments" class="nav-item">
          <i class="fas fa-calendar-check"></i>
          <span>Appointments</span>
        </a>
        <a href="/chat" class="nav-item active">
          <i class="fas fa-robot"></i>
          <span>AI Chat Assistance</span>
        </a>
        <a href="/education" class="nav-item">
          <i class="fas fa-book-medical"></i>
          <span>Health Education</span>
        </a>
        <a href="/sensor-management" class="nav-item">
          <i class="fas fa-microchip"></i>
          <span>Sensor Management</span>
        </a>
        <a href="/user-management" class="nav-item">
          <i class="fas fa-users"></i>
          <span>User Management</span>
        </a>

        <a href="/professional-about-us-page" class="nav-item">
          <i class="fas fa-info-circle"></i>
          <span>About Us</span>
        </a>
        <a href="/feedback" class="nav-item">
          <i class="fas fa-comment-dots"></i>
          <span>Feedback</span>
        </a>
        <a href="/change-password" class="nav-item">
          <i class="fas fa-key"></i>
          <span>Change Password</span>
        </a>
        <a href="#" class="nav-item">
          <i class="fas fa-sign-out-alt"></i>
          <span>Logout</span>
        </a>
      </nav>
    </div>

    <header class="header">
      <div class="search-bar">
        <i class="fas fa-search"></i>
        <input type="text" placeholder="Search..." />
      </div>
      <div class="user-profile">
        <div class="notifications">
          <i class="fas fa-bell"></i>
        </div>
        <div class="user-avatar">
          <!-- Profile picture will be inserted dynamically -->
        </div>
        <div class="user-info">
          <h4 id="user-name">Loading...</h4>
        </div>
        <!-- Add Dropdown Menu -->
        <div class="dropdown-menu">
          <a
            href="#"
            class="dropdown-item"
            id="update-profile-btn"
            data-page="/firebase-profile-update"
          >
            <i class="fas fa-user"></i>
            Update Profile
          </a>
          <a href="#" class="dropdown-item" id="logout-btn">
            <i class="fas fa-sign-out-alt"></i>
            Logout
          </a>
        </div>
      </div>
    </header>

    <!-- Main Content Area -->
    <div id="main-content" class="main-content">
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <meta
            name="viewport"
            content="width=device-width, initial-scale=1.0"
          />
          <title>AI Chat Assistance</title>
          <style>
            :root {
              --sidebar-width: 250px;
              --header-height: 70px;
              --primary-color: #1e3c72;
              --secondary-color: #ff7e5f;
              --hover-color: #2a5298;

              --background-color: #f8f9fa;
              --text-color: #333;
              --border-color: #e0e0e0;
              --shadow-color: rgba(0, 0, 0, 0.1);
            }

            * {
              margin: 0;
              padding: 0;
              box-sizing: border-box;
              font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
            }

            body {
              background-color: var(--background-color);
              color: var(--text-color);
              line-height: 1.6;
            }

            .container {
              max-width: 1200px;
              margin: 0 auto;
              padding: 20px;
            }

            .app-header {
              text-align: center;
              margin-bottom: 30px;
            }

            .app-title {
              font-size: 2.5rem;
              margin-bottom: 10px;
              color: var(--primary-color);
            }

            .app-description {
              font-size: 1.1rem;
              color: #666;
            }

            .app-content {
              display: flex;
              flex-direction: column;
              gap: 20px;
            }

            .model-selector {
              background-color: white;
              border-radius: 10px;
              padding: 20px;
              box-shadow: 0 4px 8px var(--shadow-color);
            }

            .chat-container {
              display: flex;
              flex-direction: column;
              height: 600px;
              background-color: white;
              border-radius: 10px;
              overflow: hidden;
              box-shadow: 0 4px 8px var(--shadow-color);
            }

            .chat-messages {
              flex: 1;
              overflow-y: auto;
              padding: 20px;
            }

            .message {
              margin-bottom: 15px;
              padding: 12px 16px;
              border-radius: 8px;
              max-width: 85%;
              animation: fadeIn 0.3s ease-in-out;
            }

            @keyframes fadeIn {
              from {
                opacity: 0;
                transform: translateY(10px);
              }
              to {
                opacity: 1;
                transform: translateY(0);
              }
            }

            .user-message {
              background-color: var(--primary-color);
              color: white;
              align-self: flex-end;
              margin-left: auto;
            }

            .ai-message {
              background-color: #f1f1f1;
              color: var(--text-color);
              align-self: flex-start;
            }

            .message-content {
              white-space: pre-wrap;
            }

            .timestamp {
              font-size: 0.7rem;
              color: rgba(255, 255, 255, 0.7);
              text-align: right;
              margin-top: 5px;
            }

            .ai-message .timestamp {
              color: #999;
            }

            .chat-input-container {
              display: flex;
              padding: 15px;
              background-color: #f5f5f5;
              border-top: 1px solid var(--border-color);
            }

            .chat-input {
              flex: 1;
              padding: 12px 16px;
              border: 1px solid var(--border-color);
              border-radius: 25px;
              font-size: 1rem;
              outline: none;
              resize: none;
              height: 48px;
              max-height: 150px;
              overflow-y: auto;
            }

            .chat-input:focus {
              border-color: var(--primary-color);
            }

            .send-button {
              background-color: var(--primary-color);
              color: white;
              border: none;
              border-radius: 50%;
              width: 48px;
              height: 48px;
              margin-left: 10px;
              cursor: pointer;
              display: flex;
              align-items: center;
              justify-content: center;
              transition: background-color 0.2s;
            }

            .send-button:hover {
              background-color: var(--secondary-color);
            }

            .send-button:disabled {
              background-color: #ccc;
              cursor: not-allowed;
            }

            .loading-indicator {
              display: flex;
              align-items: center;
              justify-content: center;
              padding: 20px;
            }

            .dot {
              width: 8px;
              height: 8px;
              background-color: var(--primary-color);
              border-radius: 50%;
              margin: 0 5px;
              animation: bounce 1.4s infinite ease-in-out both;
            }

            .dot:nth-child(1) {
              animation-delay: -0.32s;
            }
            .dot:nth-child(2) {
              animation-delay: -0.16s;
            }

            @keyframes bounce {
              0%,
              80%,
              100% {
                transform: scale(0);
              }
              40% {
                transform: scale(1);
              }
            }

            .select-wrapper {
              position: relative;
            }

            select {
              width: 100%;
              padding: 12px;
              border: 1px solid var(--border-color);
              border-radius: 6px;
              appearance: none;
              background-color: white;
              font-size: 1rem;
              cursor: pointer;
            }

            .select-arrow {
              position: absolute;
              right: 12px;
              top: 50%;
              transform: translateY(-50%);
              pointer-events: none;
            }

            label {
              font-weight: 600;
              margin-bottom: 5px;
              display: block;
            }

            @media (max-width: 768px) {
              .app-title {
                font-size: 2rem;
              }

              .chat-container {
                height: 70vh;
              }

              .message {
                max-width: 90%;
              }
            }

            /* Markdown styling */
            .markdown code {
              background-color: #f0f0f0;
              padding: 2px 5px;
              border-radius: 3px;
              font-family: monospace;
            }

            .markdown pre {
              background-color: #f0f0f0;
              padding: 10px;
              border-radius: 5px;
              overflow-x: auto;
              margin: 10px 0;
            }

            .markdown blockquote {
              border-left: 4px solid var(--primary-color);
              padding-left: 10px;
              color: #666;
              margin: 10px 0;
            }

            .markdown h1,
            .markdown h2,
            .markdown h3 {
              margin: 15px 0 10px 0;
            }

            .markdown p {
              margin-bottom: 10px;
            }

            .markdown ul,
            .markdown ol {
              margin: 10px 0;
              padding-left: 20px;
            }

            .status-indicator {
              display: flex;
              align-items: center;
              gap: 8px;
              margin-top: 10px;
            }

            .status-dot {
              width: 10px;
              height: 10px;
              border-radius: 50%;
            }

            .status-connected {
              background-color: #4caf50;
            }

            .status-disconnected {
              background-color: #f44336;
            }

            .status-text {
              font-size: 0.9rem;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <header class="app-header">
              <h1 class="app-title">AI Chat Assistance</h1>
              <p class="app-description">
                Interact with our Real Time AI Chat Assistance for your Health
              </p>
            </header>

            <main class="app-content">
              <section class="model-selector">
                <div class="status-indicator">
                  <div
                    class="status-dot status-connected"
                    id="status-dot"
                  ></div>
                  <div class="status-text" id="status-text">
                    Connected to AI Chat Assistance
                  </div>
                </div>
                <div style="margin-top: 15px">
                  <label for="model-select">Select Model</label>
                  <div class="select-wrapper">
                    <select id="model-select">
                      <option value="models/gemini-1.5-flash-latest">
                        Gemini 1.5 Flash (Latest)
                      </option>
                      <option value="models/gemini-1.5-pro-latest">
                        Gemini 1.5 Pro (Latest)
                      </option>
                    </select>
                    <div class="select-arrow">▼</div>
                  </div>
                </div>
              </section>

              <section class="chat-container">
                <div class="chat-messages" id="chat-messages">
                  <div class="message ai-message">
                    <div class="message-content">
                      Hello! I'm AI Chat Assistance. How can I assist you today?
                    </div>
                    <div class="timestamp">Now</div>
                  </div>
                </div>
                <div class="chat-input-container">
                  <textarea
                    class="chat-input"
                    id="chat-input"
                    placeholder="Type your message here..."
                  ></textarea>
                  <button class="send-button" id="send-button">
                    <svg
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"
                        fill="white"
                      />
                    </svg>
                  </button>
                </div>
              </section>
            </main>
          </div>

          <script>
            // DOM Elements
            const modelSelect = document.getElementById("model-select");
            const chatMessages = document.getElementById("chat-messages");
            const chatInput = document.getElementById("chat-input");
            const sendButton = document.getElementById("send-button");
            const statusDot = document.getElementById("status-dot");
            const statusText = document.getElementById("status-text");

            // Hardcoded Configuration
            const apiKey = "AIzaSyCz1HueJ6QPaDXbRLNpuGWqyWZdgZsKW-4"; // Hardcoded API key
            let modelName =
              localStorage.getItem("gemini_model") ||
              "models/gemini-1.5-flash-latest";
            let isApiConnected = true; // Assume connected by default with hardcoded key

            // Initialize
            function init() {
              modelSelect.value = modelName;

              // Auto-resize textarea
              chatInput.addEventListener("input", function () {
                this.style.height = "auto";
                this.style.height =
                  this.scrollHeight < 150 ? this.scrollHeight + "px" : "150px";
              });

              // Enter key to send message
              chatInput.addEventListener("keydown", function (e) {
                if (e.key === "Enter" && !e.shiftKey) {
                  e.preventDefault();
                  sendMessage();
                }
              });

              // Handle model selection
              modelSelect.addEventListener("change", function () {
                modelName = this.value;
                localStorage.setItem("gemini_model", modelName);
              });

              // Handle send button
              sendButton.addEventListener("click", sendMessage);

              // Check API connection on startup
              validateApiConnection();
            }

            // Check if API key is valid
            async function validateApiConnection() {
              try {
                const response = await fetch(
                  `https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`
                );
                const data = await response.json();

                if (response.ok && data.models) {
                  isApiConnected = true;
                  updateConnectionStatus(true);
                } else {
                  throw new Error(
                    data.error?.message || "API connection failed"
                  );
                }
              } catch (error) {
                console.error("API validation error:", error);
                isApiConnected = false;
                updateConnectionStatus(false, error.message);
              }
            }

            // Update connection status indicator
            function updateConnectionStatus(isConnected, errorMessage = "") {
              if (isConnected) {
                statusDot.className = "status-dot status-connected";
                statusText.textContent = "Connected to AI Chat Assistance";
                statusText.style.color = "#4CAF50";
                chatInput.disabled = false;
                sendButton.disabled = false;
              } else {
                statusDot.className = "status-dot status-disconnected";
                statusText.textContent =
                  "Disconnected: " + (errorMessage || "Check API key");
                statusText.style.color = "#F44336";
                chatInput.disabled = true;
                sendButton.disabled = true;
              }
            }

            // Add message to chat
            function addMessage(content, sender) {
              const messageDiv = document.createElement("div");
              messageDiv.classList.add("message");
              messageDiv.classList.add(
                sender === "user" ? "user-message" : "ai-message"
              );

              const messageContent = document.createElement("div");
              messageContent.classList.add("message-content");

              if (sender === "ai") {
                // Process markdown for AI messages
                messageContent.classList.add("markdown");
                messageContent.innerHTML = markdownToHtml(content);
              } else {
                messageContent.textContent = content;
              }

              messageDiv.appendChild(messageContent);

              const timestamp = document.createElement("div");
              timestamp.classList.add("timestamp");
              timestamp.textContent = new Date().toLocaleTimeString();
              messageDiv.appendChild(timestamp);

              chatMessages.appendChild(messageDiv);
              chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Add loading indicator
            function addLoadingIndicator() {
              const loadingDiv = document.createElement("div");
              loadingDiv.classList.add("loading-indicator");
              loadingDiv.id = "loading-indicator";

              for (let i = 0; i < 3; i++) {
                const dot = document.createElement("div");
                dot.classList.add("dot");
                loadingDiv.appendChild(dot);
              }

              chatMessages.appendChild(loadingDiv);
              chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Remove loading indicator
            function removeLoadingIndicator() {
              const loadingIndicator =
                document.getElementById("loading-indicator");
              if (loadingIndicator) {
                loadingIndicator.remove();
              }
            }

            // Send message to Gemini API
            async function sendMessage() {
              const userMessage = chatInput.value.trim();

              if (!userMessage || !isApiConnected) return;

              // Add user message to chat
              addMessage(userMessage, "user");

              // Clear input and reset height
              chatInput.value = "";
              chatInput.style.height = "48px";

              // Disable input while waiting for response
              chatInput.disabled = true;
              sendButton.disabled = true;

              // Show loading indicator
              addLoadingIndicator();

              try {
                const response = await fetch(
                  `https://generativelanguage.googleapis.com/v1beta/${modelName}:generateContent?key=${apiKey}`,
                  {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                      contents: [
                        {
                          role: "user",
                          parts: [{ text: userMessage }],
                        },
                      ],
                      generationConfig: {
                        temperature: 0.7,
                        topK: 40,
                        topP: 0.95,
                        maxOutputTokens: 1024,
                      },
                    }),
                  }
                );

                const data = await response.json();

                // Remove loading indicator
                removeLoadingIndicator();

                if (
                  response.ok &&
                  data.candidates &&
                  data.candidates.length > 0
                ) {
                  const aiReply = data.candidates[0].content.parts[0].text;
                  addMessage(aiReply, "ai");
                } else {
                  throw new Error(
                    data.error?.message || "Failed to get response"
                  );
                }
              } catch (error) {
                console.error("API error:", error);
                removeLoadingIndicator();
                addMessage(
                  `Sorry, I encountered an error: ${error.message}`,
                  "ai"
                );

                // Check if it's an API key issue
                if (
                  error.message.includes("API key") ||
                  error.message.includes("auth")
                ) {
                  isApiConnected = false;
                  updateConnectionStatus(false, error.message);
                }
              }

              // Re-enable input
              if (isApiConnected) {
                chatInput.disabled = false;
                sendButton.disabled = false;
                chatInput.focus();
              }
            }

            // Simple markdown to HTML converter
            function markdownToHtml(markdown) {
              // Code blocks
              let html = markdown.replace(
                /```([\s\S]+?)```/g,
                function (match, p1) {
                  return `<pre><code>${p1
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")}</code></pre>`;
                }
              );

              // Inline code
              html = html.replace(/`([^`]+)`/g, "<code>$1</code>");

              // Bold
              html = html.replace(/\*\*([^*]+)\*\*/g, "<strong>$1</strong>");

              // Italic
              html = html.replace(/\*([^*]+)\*/g, "<em>$1</em>");

              // Headers
              html = html.replace(/^### (.*$)/gm, "<h3>$1</h3>");
              html = html.replace(/^## (.*$)/gm, "<h2>$1</h2>");
              html = html.replace(/^# (.*$)/gm, "<h1>$1</h1>");

              // Lists
              html = html.replace(/^\- (.*$)/gm, "<li>$1</li>");
              html = html.replace(/^\d+\. (.*$)/gm, "<li>$1</li>");

              // Wrap lists
              html = html.replace(/<li>.*<\/li>/g, function (match) {
                return "<ul>" + match + "</ul>";
              });

              // Fix nested lists
              html = html.replace(/<\/ul>\s*<ul>/g, "");

              // Links
              html = html.replace(
                /\[([^\]]+)\]\(([^)]+)\)/g,
                '<a href="$2" target="_blank">$1</a>'
              );

              // Paragraphs
              html = html.replace(/^(?!<[h|u|o|p|b])(.*$)/gm, function (match) {
                return match.trim() ? "<p>" + match + "</p>" : "";
              });

              // Fix multiple paragraph tags
              html = html.replace(/<\/p><p>/g, "</p>\n<p>");

              return html;
            }

            // Initialize the app
            init();
          </script>
        </body>
      </html>
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-auth.js"></script>
    <script type="module">
      import { initializeApp } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-app.js";
      import {
        getAuth,
        onAuthStateChanged,
        signOut,
      } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-auth.js";

      // Firebase Configuration
      const firebaseConfig = {
        apiKey: "AIzaSyCvHiTAGdlMaH2WNb4LmxlUMJ9BIwNxF_g",
        authDomain: "bms-exsel.firebaseapp.com",
        projectId: "bms-exsel",
        storageBucket: "bms-exsel.appspot.com",
        messagingSenderId: "950039193184",
        appId: "1:950039193184:web:f97fc79d5798ab3f628505",
        measurementId: "G-L8S1N8Q0CD",
      };

      // Initialize Firebase
      const app = initializeApp(firebaseConfig);
      const auth = getAuth(app);

      // Function to Update User Profile
      function updateUserProfile(user) {
        if (!user) return;

        console.log("Updating User Profile:", user); // Debugging Step

        const userName = user.displayName || "User";
        const userProfilePicture =
          user.photoURL || "https://via.placeholder.com/40"; // Default image

        // Update UI Elements
        document.getElementById("user-name").textContent = userName;
        document.querySelector(
          ".user-avatar"
        ).innerHTML = `<img src="${userProfilePicture}" alt="User Avatar">`;
      }

      // Load User Profile on Authentication State Change
      onAuthStateChanged(auth, (user) => {
        if (user) {
          console.log("User Logged In:", user);
          updateUserProfile(user);
        } else {
          console.warn("User not logged in, redirecting...");
          window.location.href = "{{ url_for('home') }}";
        }
      });

      // Toggle dropdown when clicking on user profile
      document.querySelector(".user-profile").addEventListener("click", (e) => {
        e.stopPropagation(); // Prevent event from bubbling
        document.querySelector(".dropdown-menu").classList.toggle("active");
      });

      // Close dropdown when clicking outside
      document.addEventListener("click", (e) => {
        const dropdown = document.querySelector(".dropdown-menu");
        const userProfile = document.querySelector(".user-profile");

        if (!userProfile.contains(e.target)) {
          dropdown.classList.remove("active");
        }
      });
      function loadPage(pageUrl) {
        const mainContent = document.getElementById("main-content");

        mainContent.innerHTML = `
    <div style="text-align: center; padding: 20px;">
      <i class="fas fa-spinner fa-spin fa-2x"></i>
      <p>Loading...</p>
    </div>`;

        fetch(pageUrl)
          .then((response) => response.text())
          .then((html) => {
            mainContent.innerHTML = html;

            // Re-run Firebase authentication after loading new content
            onAuthStateChanged(auth, (user) => {
              if (user) {
                updateUserProfile(user);
              }
            });

            // Extract and execute new scripts
            mainContent.querySelectorAll("script").forEach((oldScript) => {
              const newScript = document.createElement("script");
              newScript.textContent = oldScript.textContent;
              document.body.appendChild(newScript);
            });
          })
          .catch((error) => console.error("Error loading page:", error));
      }

      // Attach navigation event listeners
      document.querySelectorAll(".nav-item").forEach((item) => {
        item.addEventListener("click", function (event) {
          event.preventDefault();
          const pageUrl = this.getAttribute("href");
          loadPage(pageUrl);
        });
      });

      // Logout Function
      document
        .getElementById("logout-btn")
        .addEventListener("click", logoutUser);

      function logoutUser() {
        signOut(auth)
          .then(() => {
            console.log("User signed out.");
            window.location.href = "{{ url_for('home') }}";
          })
          .catch((error) => {
            console.error("Logout Error:", error);
          });
      }
    </script>
  </body>
</html>
