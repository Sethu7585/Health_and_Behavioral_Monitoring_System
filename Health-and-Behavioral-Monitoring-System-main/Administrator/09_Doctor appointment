<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Favicon -->
    <link
      rel="icon"
      type="image/x-icon"
      href="{{ url_for('static', filename='/images/HBMS.ico') }}"
    />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BMS - Dashboard</title>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      }

      :root {
        --sidebar-width: 250px;
        --header-height: 70px;
        --primary-color: #1e3c72;
        --secondary-color: #ff7e5f;
        --hover-color: #2a5298;
      }

      body {
        min-height: 100vh;
        background: #f5f7fa;
      }

      .sidebar {
        position: fixed;
        left: 0;
        top: 0;
        bottom: 0;
        width: var(--sidebar-width);
        background: var(--primary-color);
        color: white;
        transition: 0.3s;
        z-index: 1000;
        display: flex;
        flex-direction: column;
        overflow-y: auto; /* Enables scrolling for menu items */
        overflow-x: hidden; /* Prevents horizontal scrolling */
        max-height: 100vh; /* Keeps sidebar within viewport height */
        scrollbar-width: thin; /* Makes scrollbar thinner */
        scrollbar-color: #ccc transparent; /* Custom scrollbar colors */
      }

      /* Optional: Style the scrollbar for WebKit browsers */
      .sidebar::-webkit-scrollbar {
        width: 6px;
      }

      .sidebar::-webkit-scrollbar-thumb {
        background-color: #888; /* Scrollbar color */
        border-radius: 5px;
      }

      .sidebar::-webkit-scrollbar-thumb:hover {
        background-color: #555; /* Darker on hover */
      }

      /* Ensure the content inside the sidebar doesn't overflow */
      .sidebar nav {
        display: flex;
        flex-direction: column;
        overflow-x: hidden; /* Extra safety */
      }

      .nav-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 10px;
        color: white;
        text-decoration: none; /* Removes underline */
        border-radius: 5px;
        transition: 0.3s;
        cursor: pointer;
      }

      .nav-item:hover {
        background-color: #2a5298;
      }

      .nav-item.active {
        background-color: #ff7e5f;
      }

      /* Ensure all nested elements inside links also inherit no underline */
      .nav-item i,
      .nav-item span {
        text-decoration: none; /* Ensures icons and text don't get underlined */
      }

      .sidebar-header {
        position: sticky;
        top: 0;
        background: var(--primary-color);
        z-index: 1001; /* Ensures it stays above scrolling content */
        padding: 1rem 0;
        text-align: center;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .sidebar-header img {
        width: 140px; /* Adjust width */
        max-width: 100%;
        height: auto; /* Maintain aspect ratio */
        display: block; /* Remove extra space */
        margin: 0 auto; /* Center the image */
      }

      /* Header Styles */
      .header {
        position: fixed;
        right: 0;
        top: 0;
        left: var(--sidebar-width);
        height: var(--header-height);
        background: white;
        padding: 1rem 2rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        z-index: 999;
      }

      /* Main Content Area */
      .main-content {
        margin-left: var(--sidebar-width);
        padding-top: var(--header-height);
        padding: calc(var(--header-height) + 20px) 20px 20px;
        min-height: 100vh;
      }

      .search-bar {
        display: flex;
        align-items: center;
        background: #ffffff;
        border-radius: 25px;
        padding: 8px 15px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        width: 300px;
        transition: all 0.3s ease-in-out;
        border: 1px solid #ccc;
        position: relative;
      }

      .search-bar i {
        font-size: 16px;
        color: #666;
        position: absolute;
        left: 12px; /* Adjust icon position inside the box */
      }

      .search-bar input {
        border: none;
        outline: none;
        font-size: 16px;
        padding: 8px 10px 8px 35px; /* Left padding to prevent overlap */
        width: 100%;
        background: transparent;
        border-radius: 25px;
      }

      .search-bar:hover {
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
      }
      .user-profile {
        display: flex;
        align-items: center;
        gap: 1rem;
        cursor: pointer;
      }

      .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: var(--primary-color);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
      }
      .user-avatar img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }
      /* Dropdown Styles */
      .profile-dropdown {
        position: absolute;
        top: 70px; /* Adjust to match header height */
        right: 20px;
        background: white;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        width: 200px;
        padding: 15px;
        display: none; /* Initially Hidden */
        z-index: 1000;
      }

      .profile-header {
        text-align: center;
        margin-bottom: 10px;
      }

      .profile-header img {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        margin-bottom: 5px;
      }

      .profile-header h4 {
        font-size: 16px;
        color: #333;
      }

      .profile-dropdown button {
        width: 100%;
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        margin: 5px 0;
        transition: background 0.3s;
      }

      .profile-dropdown button:hover {
        background: var(--hover-color);
      }

      .dropdown-menu {
        position: absolute;
        top: 100%;
        right: 0;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        width: 200px;
        display: none;
        z-index: 1000;
        margin-top: 10px;
        border: 1px solid #eee;
      }

      .dropdown-menu.active {
        display: block;
      }

      .dropdown-item {
        padding: 12px 16px;
        display: flex;
        align-items: center;
        gap: 10px;
        color: #333;
        text-decoration: none;
        transition: background-color 0.2s;
      }

      .dropdown-item:first-child {
        border-radius: 8px 8px 0 0;
      }

      .dropdown-item:last-child {
        border-radius: 0 0 8px 8px;
      }

      .dropdown-item:hover {
        background-color: #f5f7fa;
      }

      .dropdown-item i {
        width: 16px;
        color: var(--primary-color);
      }

      /* Add arrow to dropdown */
      .dropdown-menu::before {
        content: "";
        position: absolute;
        top: -8px;
        right: 20px;
        width: 16px;
        height: 16px;
        background: white;
        transform: rotate(45deg);
        border-left: 1px solid #eee;
        border-top: 1px solid #eee;
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        .sidebar {
          transform: translateX(-100%);
        }

        .header {
          left: 0;
        }

        .main-content {
          margin-left: 0;
        }

        .sidebar.active {
          transform: translateX(0);
        }
      }
    </style>
  </head>
  <body>
    <!-- Sidebar -->
    <div class="sidebar">
      <div class="sidebar-header">
        <img src="static/images/HBMS.png" alt="Logo" />
        <h3>HBMS Dashboard</h3>
      </div>
      <nav>
        <a href="/home" class="nav-item">
          <i class="fas fa-home"></i>
          <span>Home</span>
        </a>
        <a href="/live-monitoring" class="nav-item">
          <i class="fas fa-video"></i>
          <span>Live Monitoring</span>
        </a>
        <a href="/analytics" class="nav-item">
          <i class="fas fa-chart-line"></i>
          <span>Analytics</span>
        </a>
        <a href="/notifications" class="nav-item">
          <i class="fas fa-bell"></i>
          <span>Notifications</span>
        </a>
        <a href="/reports" class="nav-item">
          <i class="fas fa-file-alt"></i>
          <span>Reports</span>
        </a>
        <a href="/appointments" class="nav-item active">
          <i class="fas fa-calendar-check"></i>
          <span>Appointments</span>
        </a>
        <a href="/chat" class="nav-item">
          <i class="fas fa-robot"></i>
          <span>AI Chat Assistance</span>
        </a>
        <a href="/education" class="nav-item">
          <i class="fas fa-book-medical"></i>
          <span>Health Education</span>
        </a>
        <a href="/sensor-management" class="nav-item">
          <i class="fas fa-microchip"></i>
          <span>Sensor Management</span>
        </a>
        <a href="/user-management" class="nav-item">
          <i class="fas fa-users"></i>
          <span>User Management</span>
        </a>

        <a href="/professional-about-us-page" class="nav-item">
          <i class="fas fa-info-circle"></i>
          <span>About Us</span>
        </a>
        <a href="/feedback" class="nav-item">
          <i class="fas fa-comment-dots"></i>
          <span>Feedback</span>
        </a>
        <a href="/change-password" class="nav-item">
          <i class="fas fa-key"></i>
          <span>Change Password</span>
        </a>
        <a href="#" class="nav-item" id="logout-btn">
          <i class="fas fa-sign-out-alt"></i>
          <span>Logout</span>
        </a>
      </nav>
    </div>

    <header class="header">
      <div class="search-bar">
        <i class="fas fa-search"></i>
        <input type="text" placeholder="Search..." />
      </div>
      <div class="user-profile">
        <div class="notifications">
          <i class="fas fa-bell"></i>
        </div>
        <div class="user-avatar">
          <!-- Profile picture will be inserted dynamically -->
        </div>
        <div class="user-info">
          <h4 id="user-name">Loading...</h4>
        </div>
        <!-- Add Dropdown Menu -->
        <div class="dropdown-menu">
          <a
            href="#"
            class="dropdown-item"
            id="update-profile-btn"
            data-page="/firebase-profile-update"
          >
            <i class="fas fa-user"></i>
            Update Profile
          </a>
          <a href="#" class="dropdown-item" id="logout-btn">
            <i class="fas fa-sign-out-alt"></i>
            Logout
          </a>
        </div>
      </div>
    </header>

    <!-- Main Content Area -->
    <div id="main-content" class="main-content">
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <meta
            name="viewport"
            content="width=device-width, initial-scale=1.0"
          />
          <title>Doctor Appointment Booking</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              background: #f5f6fa;
              padding: 20px;
            }
            .booking-container {
              max-width: 800px;
              margin: 20px auto;
              padding: 30px;
              background: white;
              border-radius: 10px;
              box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            }
            .form-group {
              margin-bottom: 15px;
            }
            label {
              font-weight: bold;
              display: block;
              margin-bottom: 5px;
            }
            input,
            select,
            textarea {
              width: 100%;
              padding: 10px;
              border: 1px solid #ccc;
              border-radius: 5px;
              font-size: 14px;
            }
            textarea {
              height: 100px;
              resize: none;
            }
            button {
              background: #3498db;
              color: white;
              padding: 10px 20px;
              border: none;
              border-radius: 5px;
              cursor: pointer;
              margin-top: 10px;
            }
            button:hover {
              background: #2980b9;
            }
            .appointment-history {
              margin-top: 30px;
              padding: 20px;
              background: white;
              border-radius: 10px;
              box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            }
            .appointment-history ul {
              list-style-type: none;
              padding: 0;
            }
            .appointment-history li {
              background: #ecf0f1;
              padding: 15px;
              margin: 10px 0;
              border-radius: 5px;
              line-height: 1.5;
              font-size: 14px;
            }
            .delete-btn {
              background: #e74c3c;
              color: white;
              padding: 5px 10px;
              margin: 5px;
              border: none;
              border-radius: 5px;
              cursor: pointer;
            }
            .delete-btn:hover {
              background: #c0392b;
            }
          </style>
        </head>
        <body>
          <div class="booking-container">
            <h2>Book Doctor Appointment</h2>
            <form id="appointmentForm">
              <div class="form-group">
                <label>Select Doctor:</label>
                <select id="doctorSelect" required>
                  <option value="">Choose Doctor</option>
                  <option value="Dr. John Smith - Cardiology">Dr. John Smith (Cardiology)</option>
<option value="Dr. Sarah Jones - Pediatrics">Dr. Sarah Jones (Pediatrics)</option>
<option value="Dr. Emily Davis - Neurology">Dr. Emily Davis (Neurology)</option>
<option value="Dr. Michael Brown - Orthopedics">Dr. Michael Brown (Orthopedics)</option>
<option value="Dr. Jessica Wilson - Dermatology">Dr. Jessica Wilson (Dermatology)</option>
<option value="Dr. Robert Miller - Endocrinology">Dr. Robert Miller (Endocrinology)</option>
<option value="Dr. Anna Lee - Gynecology">Dr. Anna Lee (Gynecology)</option>
<option value="Dr. David Garcia - Pulmonology">Dr. David Garcia (Pulmonology)</option>
<option value="Dr. Christopher Johnson - Oncology">Dr. Christopher Johnson (Oncology)</option>
<option value="Dr. Olivia Martinez - Psychiatry">Dr. Olivia Martinez (Psychiatry)</option>
<option value="Dr. Daniel White - Nephrology">Dr. Daniel White (Nephrology)</option>
<option value="Dr. Sophia Anderson - Gastroenterology">Dr. Sophia Anderson (Gastroenterology)</option>
<option value="Dr. James Rodriguez - Rheumatology">Dr. James Rodriguez (Rheumatology)</option>
<option value="Dr. William Harris - Urology">Dr. William Harris (Urology)</option>
<option value="Dr. Elizabeth Clark - Ophthalmology">Dr. Elizabeth Clark (Ophthalmology)</option>
<option value="Dr. Matthew Lewis - General Medicine">Dr. Matthew Lewis (General Medicine)</option>

                  </option>
                </select>
              </div>

              <div class="form-group">
                <label>Appointment Date:</label>
                <input type="date" id="appointmentDate" required />
              </div>

              <div class="form-group">
                <label>Appointment Time:</label>
                <input type="time" id="appointmentTime" required />
              </div>

              <div class="form-group">
                <label>Patient Name:</label>
                <input type="text" id="patientName" required />
              </div>

              <div class="form-group">
                <label>Phone Number:</label>
                <input type="tel" id="patientPhone" required />
              </div>

              <div class="form-group">
                <label>Email:</label>
                <input type="email" id="patientEmail" required />
              </div>

              <div class="form-group">
                <label>Reason for Visit:</label>
                <textarea id="reasonForVisit" required></textarea>
              </div>

              <button type="submit">Book Appointment</button>
            </form>
          </div>

          <div class="appointment-history">
            <h2>Appointment History</h2>
            <ul id="historyList"></ul>
          </div>

          <!-- Firebase SDK -->
          <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
          <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"></script>

          <script>
            const firebaseConfig1 = {
              apiKey: "AIzaSyCvHiTAGdlMaH2WNb4LmxlUMJ9BIwNxF_g",
              authDomain: "bms-exsel.firebaseapp.com",
              databaseURL: "https://bms-exsel-default-rtdb.firebaseio.com/",
              projectId: "bms-exsel",
              storageBucket: "bms-exsel.appspot.com",
              messagingSenderId: "950039193184",
              appId: "1:950039193184:web:f97fc79d5798ab3f628505",
              measurementId: "G-L8S1N8Q0CD",
            };

            firebase.initializeApp(firebaseConfig1);
            const database = firebase.database();

            document
              .getElementById("appointmentForm")
              .addEventListener("submit", async (e) => {
                e.preventDefault();

                const appointmentData = {
                  doctor: document.getElementById("doctorSelect").value,
                  date: document.getElementById("appointmentDate").value,
                  time: document.getElementById("appointmentTime").value,
                  patientName: document.getElementById("patientName").value,
                  phone: document.getElementById("patientPhone").value,
                  email: document.getElementById("patientEmail").value,
                  reason: document.getElementById("reasonForVisit").value,
                  timestamp: new Date().toLocaleString(),
                };

                try {
                  await database.ref("appointments").push(appointmentData);
                  alert("Appointment booked successfully!");
                  document.getElementById("appointmentForm").reset();
                  fetchHistory();
                } catch (error) {
                  alert("Error processing request.");
                }
              });

            function fetchHistory() {
              database.ref("appointments").on("value", (snapshot) => {
                const historyList = document.getElementById("historyList");
                historyList.innerHTML = "";
                if (snapshot.exists()) {
                  snapshot.forEach((childSnapshot) => {
                    const appt = childSnapshot.val();
                    const apptId = childSnapshot.key;
                    const li = document.createElement("li");
                    li.innerHTML = `
                            <strong>Doctor:</strong> ${appt.doctor}<br>
                            <strong>Date:</strong> ${appt.date} | <strong>Time:</strong> ${appt.time}<br>
                            <strong>Patient:</strong> ${appt.patientName}<br>
                            <strong>Phone:</strong> ${appt.phone}<br>
                            <strong>Email:</strong> ${appt.email}<br>
                            <strong>Reason:</strong> ${appt.reason}<br>
                            <button class="delete-btn" onclick="deleteAppointment('${apptId}')">Cancel</button>
                        `;
                    historyList.appendChild(li);
                  });
                }
              });
            }

            function deleteAppointment(id) {
              if (
                confirm("Are you sure you want to cancel this appointment?")
              ) {
                database
                  .ref(`appointments/${id}`)
                  .remove()
                  .then(() => fetchHistory())
                  .catch(() => alert("Error canceling appointment."));
              }
            }

            fetchHistory();
          </script>
        </body>
      </html>
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-auth.js"></script>
    <script type="module">
      import { initializeApp } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-app.js";
      import {
        getAuth,
        onAuthStateChanged,
        signOut,
      } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-auth.js";

      // Firebase Configuration
      const firebaseConfig = {
        apiKey: "AIzaSyCvHiTAGdlMaH2WNb4LmxlUMJ9BIwNxF_g",
        authDomain: "bms-exsel.firebaseapp.com",
        projectId: "bms-exsel",
        storageBucket: "bms-exsel.appspot.com",
        messagingSenderId: "950039193184",
        appId: "1:950039193184:web:f97fc79d5798ab3f628505",
        measurementId: "G-L8S1N8Q0CD",
      };

      // Initialize Firebase
      const app = initializeApp(firebaseConfig);
      const auth = getAuth(app);

      // Function to Update User Profile
      function updateUserProfile(user) {
        if (!user) return;

        console.log("Updating User Profile:", user); // Debugging Step

        const userName = user.displayName || "User";
        const userProfilePicture =
          user.photoURL || "https://via.placeholder.com/40"; // Default image

        // Update UI Elements
        document.getElementById("user-name").textContent = userName;
        document.querySelector(
          ".user-avatar"
        ).innerHTML = `<img src="${userProfilePicture}" alt="User Avatar">`;
      }

      // Load User Profile on Authentication State Change
      onAuthStateChanged(auth, (user) => {
        if (user) {
          console.log("User Logged In:", user);
          updateUserProfile(user);
        } else {
          console.warn("User not logged in, redirecting...");
          window.location.href = "{{ url_for('home') }}";
        }
      });

      // Toggle dropdown when clicking on user profile
      document.querySelector(".user-profile").addEventListener("click", (e) => {
        e.stopPropagation(); // Prevent event from bubbling
        document.querySelector(".dropdown-menu").classList.toggle("active");
      });

      // Close dropdown when clicking outside
      document.addEventListener("click", (e) => {
        const dropdown = document.querySelector(".dropdown-menu");
        const userProfile = document.querySelector(".user-profile");

        if (!userProfile.contains(e.target)) {
          dropdown.classList.remove("active");
        }
      });
      function loadPage(pageUrl) {
        const mainContent = document.getElementById("main-content");

        mainContent.innerHTML = `
    <div style="text-align: center; padding: 20px;">
      <i class="fas fa-spinner fa-spin fa-2x"></i>
      <p>Loading...</p>
    </div>`;

        fetch(pageUrl)
          .then((response) => response.text())
          .then((html) => {
            mainContent.innerHTML = html;

            // Re-run Firebase authentication after loading new content
            onAuthStateChanged(auth, (user) => {
              if (user) {
                updateUserProfile(user);
              }
            });

            // Extract and execute new scripts
            mainContent.querySelectorAll("script").forEach((oldScript) => {
              const newScript = document.createElement("script");
              newScript.textContent = oldScript.textContent;
              document.body.appendChild(newScript);
            });
          })
          .catch((error) => console.error("Error loading page:", error));
      }

      // Attach navigation event listeners
      document.querySelectorAll(".nav-item").forEach((item) => {
        item.addEventListener("click", function (event) {
          event.preventDefault();
          const pageUrl = this.getAttribute("href");
          loadPage(pageUrl);
        });
      });

      // Logout Function
      document
        .getElementById("logout-btn")
        .addEventListener("click", logoutUser);

      function logoutUser() {
        signOut(auth)
          .then(() => {
            console.log("User signed out.");
            window.location.href = "{{ url_for('home') }}";
          })
          .catch((error) => {
            console.error("Logout Error:", error);
          });
      }
    </script>
  </body>
</html>
