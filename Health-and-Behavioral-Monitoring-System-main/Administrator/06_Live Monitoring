<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Favicon -->
    <link
      rel="icon"
      type="image/x-icon"
      href="{{ url_for('static', filename='/images/HBMS.ico') }}"
    />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BMS - Dashboard</title>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      }

      :root {
        --sidebar-width: 250px;
        --header-height: 70px;
        --primary-color: #1e3c72;
        --secondary-color: #ff7e5f;
        --hover-color: #2a5298;
      }

      body {
        min-height: 100vh;
        background: #f5f7fa;
      }

      .sidebar {
        position: fixed;
        left: 0;
        top: 0;
        bottom: 0;
        width: var(--sidebar-width);
        background: var(--primary-color);
        color: white;
        transition: 0.3s;
        z-index: 1000;
        display: flex;
        flex-direction: column;
        overflow-y: auto; /* Enables scrolling for menu items */
        overflow-x: hidden; /* Prevents horizontal scrolling */
        max-height: 100vh; /* Keeps sidebar within viewport height */
        scrollbar-width: thin; /* Makes scrollbar thinner */
        scrollbar-color: #ccc transparent; /* Custom scrollbar colors */
      }

      /* Optional: Style the scrollbar for WebKit browsers */
      .sidebar::-webkit-scrollbar {
        width: 6px;
      }

      .sidebar::-webkit-scrollbar-thumb {
        background-color: #888; /* Scrollbar color */
        border-radius: 5px;
      }

      .sidebar::-webkit-scrollbar-thumb:hover {
        background-color: #555; /* Darker on hover */
      }

      /* Ensure the content inside the sidebar doesn't overflow */
      .sidebar nav {
        display: flex;
        flex-direction: column;
        overflow-x: hidden; /* Extra safety */
      }

      .nav-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 10px;
        color: white;
        text-decoration: none; /* Removes underline */
        border-radius: 5px;
        transition: 0.3s;
        cursor: pointer;
      }

      .nav-item:hover {
        background-color: #2a5298;
      }

      .nav-item.active {
        background-color: #ff7e5f;
      }

      /* Ensure all nested elements inside links also inherit no underline */
      .nav-item i,
      .nav-item span {
        text-decoration: none; /* Ensures icons and text don't get underlined */
      }

      .sidebar-header {
        position: sticky;
        top: 0;
        background: var(--primary-color);
        z-index: 1001; /* Ensures it stays above scrolling content */
        padding: 1rem 0;
        text-align: center;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .sidebar-header img {
        width: 140px; /* Adjust width */
        max-width: 100%;
        height: auto; /* Maintain aspect ratio */
        display: block; /* Remove extra space */
        margin: 0 auto; /* Center the image */
      }

      /* Header Styles */
      .header {
        position: fixed;
        right: 0;
        top: 0;
        left: var(--sidebar-width);
        height: var(--header-height);
        background: white;
        padding: 1rem 2rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        z-index: 999;
      }

      /* Main Content Area */
      .main-content {
        margin-left: var(--sidebar-width);
        padding-top: var(--header-height);
        padding: calc(var(--header-height) + 20px) 20px 20px;
        min-height: 100vh;
      }

      .search-bar {
        display: flex;
        align-items: center;
        background: #ffffff;
        border-radius: 25px;
        padding: 8px 15px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        width: 300px;
        transition: all 0.3s ease-in-out;
        border: 1px solid #ccc;
        position: relative;
      }

      .search-bar i {
        font-size: 16px;
        color: #666;
        position: absolute;
        left: 12px; /* Adjust icon position inside the box */
      }

      .search-bar input {
        border: none;
        outline: none;
        font-size: 16px;
        padding: 8px 10px 8px 35px; /* Left padding to prevent overlap */
        width: 100%;
        background: transparent;
        border-radius: 25px;
      }

      .search-bar:hover {
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
      }
      .user-profile {
        display: flex;
        align-items: center;
        gap: 1rem;
        cursor: pointer;
      }

      .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: var(--primary-color);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
      }
      .user-avatar img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
      }
      /* Dropdown Styles */
      .profile-dropdown {
        position: absolute;
        top: 70px; /* Adjust to match header height */
        right: 20px;
        background: white;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        width: 200px;
        padding: 15px;
        display: none; /* Initially Hidden */
        z-index: 1000;
      }

      .profile-header {
        text-align: center;
        margin-bottom: 10px;
      }

      .profile-header img {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        margin-bottom: 5px;
      }

      .profile-header h4 {
        font-size: 16px;
        color: #333;
      }

      .profile-dropdown button {
        width: 100%;
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        margin: 5px 0;
        transition: background 0.3s;
      }

      .profile-dropdown button:hover {
        background: var(--hover-color);
      }

      .dropdown-menu {
        position: absolute;
        top: 100%;
        right: 0;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        width: 200px;
        display: none;
        z-index: 1000;
        margin-top: 10px;
        border: 1px solid #eee;
      }

      .dropdown-menu.active {
        display: block;
      }

      .dropdown-item {
        padding: 12px 16px;
        display: flex;
        align-items: center;
        gap: 10px;
        color: #333;
        text-decoration: none;
        transition: background-color 0.2s;
      }

      .dropdown-item:first-child {
        border-radius: 8px 8px 0 0;
      }

      .dropdown-item:last-child {
        border-radius: 0 0 8px 8px;
      }

      .dropdown-item:hover {
        background-color: #f5f7fa;
      }

      .dropdown-item i {
        width: 16px;
        color: var(--primary-color);
      }

      /* Add arrow to dropdown */
      .dropdown-menu::before {
        content: "";
        position: absolute;
        top: -8px;
        right: 20px;
        width: 16px;
        height: 16px;
        background: white;
        transform: rotate(45deg);
        border-left: 1px solid #eee;
        border-top: 1px solid #eee;
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        .sidebar {
          transform: translateX(-100%);
        }

        .header {
          left: 0;
        }

        .main-content {
          margin-left: 0;
        }

        .sidebar.active {
          transform: translateX(0);
        }
      }

      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
          Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
        margin: 0;
        padding: 20px;
        background-color: #f0f2f5;
        color: #333;
      }
      .container {
        max-width: 1200px;
        margin: 0 auto;
      }
      /* Change the class name from 'header' to 'patient-header' */
      .patient-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        background-color: #fff;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      .patient-info {
        display: flex;
        align-items: center;
      }
      .patient-photo {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background-color: #ddd;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 15px;
        overflow: hidden;
      }
      .status {
        background-color: #4caf50;
        color: white;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 14px;
      }
      .time {
        color: #666;
        font-size: 14px;
      }
      .vitals-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
      }
      .vital-card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        position: relative;
        overflow: hidden;
      }
      .vital-card h3 {
        margin-top: 0;
        margin-bottom: 5px;
        font-size: 16px;
        color: #555;
      }
      .vital-value {
        font-size: 28px;
        font-weight: bold;
        margin-bottom: 5px;
        margin-top: 10px;
      }
      .vital-range {
        font-size: 12px;
        color: #888;
      }
      .alert {
        color: #d32f2f;
        animation: pulse 1.5s infinite;
      }
      .warning {
        color: #ff9800;
      }
      .normal {
        color: #4caf50;
      }
      .graph-container {
        height: 80px;
        margin-top: 15px;
        display: flex;
        align-items: flex-end;
      }
      .bar {
        flex: 1;
        margin: 0 1px;
        background-color: #4caf50;
        transition: height 0.3s ease;
      }
      .ecg-container {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
      }
      .ecg-graph {
        height: 120px;
        width: 100%;
        position: relative;
      }
      .ecg-line {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
      .notification-panel {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
      }
      .notification {
        padding: 10px 0;
        border-bottom: 1px solid #eee;
      }
      .notification:last-child {
        border-bottom: none;
      }
      .notification-time {
        font-size: 12px;
        color: #888;
      }

      @keyframes pulse {
        0% {
          opacity: 1;
        }
        50% {
          opacity: 0.5;
        }
        100% {
          opacity: 1;
        }
      }
    </style>
  </head>
  <body>
    <!-- Sidebar -->
    <div class="sidebar">
      <div class="sidebar-header">
        <img src="static/images/HBMS.png" alt="Logo" />
        <h3>HBMS Dashboard</h3>
      </div>
      <nav>
        <a href="/home" class="nav-item">
          <i class="fas fa-home"></i>
          <span>Home</span>
        </a>
        <a href="/live-monitoring" class="nav-item active">
          <i class="fas fa-video"></i>
          <span>Live Monitoring</span>
        </a>
        <a href="/analytics" class="nav-item">
          <i class="fas fa-chart-line"></i>
          <span>Analytics</span>
        </a>
        <a href="/notifications" class="nav-item">
          <i class="fas fa-bell"></i>
          <span>Notifications</span>
        </a>
        <a href="/reports" class="nav-item">
          <i class="fas fa-file-alt"></i>
          <span>Reports</span>
        </a>
        <a href="/appointments" class="nav-item">
          <i class="fas fa-calendar-check"></i>
          <span>Appointments</span>
        </a>
        <a href="/chat" class="nav-item">
          <i class="fas fa-robot"></i>
          <span>AI Chat Assistance</span>
        </a>
        <a href="/education" class="nav-item">
          <i class="fas fa-book-medical"></i>
          <span>Health Education</span>
        </a>
        <a href="/sensor-management" class="nav-item">
          <i class="fas fa-microchip"></i>
          <span>Sensor Management</span>
        </a>
        <a href="/user-management" class="nav-item">
          <i class="fas fa-users"></i>
          <span>User Management</span>
        </a>

        <a href="/professional-about-us-page" class="nav-item">
          <i class="fas fa-info-circle"></i>
          <span>About Us</span>
        </a>
        <a href="/feedback" class="nav-item">
          <i class="fas fa-comment-dots"></i>
          <span>Feedback</span>
        </a>
        <a href="/change-password" class="nav-item">
          <i class="fas fa-key"></i>
          <span>Change Password</span>
        </a>
        <a href="#" class="nav-item" id="logout-btn">
          <i class="fas fa-sign-out-alt"></i>
          <span>Logout</span>
        </a>
      </nav>
    </div>

    <header class="header">
      <div class="search-bar">
        <i class="fas fa-search"></i>
        <input type="text" placeholder="Search..." />
      </div>
      <div class="user-profile">
        <div class="notifications">
          <i class="fas fa-bell"></i>
        </div>
        <div class="user-avatar">
          <!-- Profile picture will be inserted dynamically -->
        </div>
        <div class="user-info">
          <h4 id="user-name">Loading...</h4>
        </div>
        <!-- Add Dropdown Menu -->
        <div class="dropdown-menu">
          <a
            href="#"
            class="dropdown-item"
            id="update-profile-btn"
            data-page="/firebase-profile-update"
          >
            <i class="fas fa-user"></i>
            Update Profile
          </a>
          <a href="#" class="dropdown-item" id="logout-btn">
            <i class="fas fa-sign-out-alt"></i>
            Logout
          </a>
        </div>
      </div>
    </header>

    <!-- Main Content Area -->
    <div id="main-content" class="main-content">
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <meta
            name="viewport"
            content="width=device-width, initial-scale=1.0"
          />
          <title>Advanced Health Monitoring System</title>

          <!-- Load Firebase v8 -->
          <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
          <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"></script>

          <!-- Chart.js for visualizations -->
          <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>

          <style>
            :root {
              --primary: #1a73e8;
              --secondary: #4285f4;
              --success: #0f9d58;
              --warning: #f4b400;
              --danger: #db4437;
              --light: #f8f9fa;
              --dark: #202124;
              --gray: #5f6368;
            }

            * {
              margin: 0;
              padding: 0;
              box-sizing: border-box;
            }

            body {
              font-family: "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell,
                "Open Sans", "Helvetica Neue", sans-serif;
              background-color: #f5f5f5;
              color: var(--dark);
              line-height: 1.6;
            }

            .dashboard {
              max-width: 1200px;
              margin: 0 auto;
              padding: 20px;
            }

            header {
              display: flex;
              align-items: center;
              justify-content: space-between;
              margin-bottom: 30px;
              padding-bottom: 15px;
              border-bottom: 1px solid #e0e0e0;
            }

            .logo-section {
              display: flex;
              align-items: center;
              gap: 15px;
            }

            .logo {
              width: 50px;
              height: 50px;
              background-color: var(--primary);
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              color: white;
              font-size: 24px;
              font-weight: bold;
            }

            .title-section h1 {
              font-size: 28px;
              font-weight: 500;
              color: var(--primary);
            }

            .title-section p {
              color: var(--gray);
              font-size: 14px;
            }

            .status-badge {
              background-color: var(--success);
              color: white;
              padding: 8px 16px;
              border-radius: 20px;
              font-size: 14px;
              font-weight: 500;
              display: flex;
              align-items: center;
              gap: 8px;
            }

            .status-badge.disconnected {
              background-color: var(--danger);
            }

            .status-indicator {
              width: 10px;
              height: 10px;
              border-radius: 50%;
              background-color: white;
              display: inline-block;
            }

            .grid-container {
              display: grid;
              grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
              gap: 20px;
              margin-bottom: 30px;
            }

            .sensor-card {
              background-color: white;
              border-radius: 12px;
              box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
              padding: 20px;
              transition: transform 0.3s ease;
            }

            .sensor-card:hover {
              transform: translateY(-5px);
            }

            .sensor-card h3 {
              font-size: 16px;
              font-weight: 500;
              color: var(--gray);
              margin-bottom: 15px;
              display: flex;
              align-items: center;
              gap: 8px;
            }

            .sensor-value {
              font-size: 32px;
              font-weight: 600;
              color: var(--dark);
              margin-bottom: 10px;
            }

            .sensor-unit {
              font-size: 14px;
              color: var(--gray);
            }

            .sensor-range {
              font-size: 12px;
              color: var(--gray);
              margin-top: 10px;
            }

            .sensor-trend {
              display: flex;
              align-items: center;
              gap: 5px;
              font-size: 14px;
              margin-top: 10px;
            }

            .trend-up {
              color: var(--danger);
            }

            .trend-down {
              color: var(--success);
            }

            .trend-stable {
              color: var(--warning);
            }

            .chart-container {
              background-color: white;
              border-radius: 12px;
              box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
              padding: 20px;
              margin-bottom: 30px;
              height: 400px;
              max-height: 50vh;
              width: 100%;
              overflow: hidden;
            }
            /* Canvas inside chart container */
            .chart-container canvas {
              max-height: 100%;
              width: 100% !important;
              height: 100% !important;
            }

            .chart-header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 20px;
            }

            .chart-header h2 {
              font-size: 18px;
              font-weight: 500;
            }

            .chart-controls {
              display: flex;
              gap: 10px;
            }

            .chart-control-btn {
              background-color: var(--light);
              border: 1px solid #e0e0e0;
              border-radius: 20px;
              padding: 6px 12px;
              font-size: 14px;
              cursor: pointer;
              transition: all 0.2s ease;
            }

            .chart-control-btn:hover,
            .chart-control-btn.active {
              background-color: var(--primary);
              color: white;
              border-color: var(--primary);
            }

            .btn-primary {
              background-color: var(--primary);
              color: white;
              border: none;
              border-radius: 6px;
              padding: 12px 24px;
              font-size: 16px;
              font-weight: 500;
              cursor: pointer;
              transition: all 0.2s ease;
              display: inline-flex;
              align-items: center;
              gap: 8px;
            }

            .btn-primary:hover {
              background-color: var(--secondary);
              box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }

            .action-bar {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 30px;
            }

            .data-info {
              font-size: 14px;
              color: var(--gray);
            }

            .critical {
              color: var(--danger);
              font-weight: 500;
            }

            .warning {
              color: var(--warning);
              font-weight: 500;
            }

            .normal {
              color: var(--success);
              font-weight: 500;
            }

            .timestamp {
              font-size: 12px;
              color: var(--gray);
              margin-top: 10px;
            }

            #notification {
              position: fixed;
              top: 20px;
              right: 20px;
              padding: 15px 25px;
              background-color: var(--success);
              color: white;
              border-radius: 6px;
              box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
              display: none;
              z-index: 1000;
              transition: all 0.3s ease;
            }

            /* Responsive styles */
            @media (max-width: 768px) {
              .grid-container {
                grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
              }

              .dashboard {
                padding: 15px;
              }

              .status-badge {
                padding: 6px 12px;
                font-size: 12px;
              }

              .title-section h1 {
                font-size: 22px;
              }

              .sensor-value {
                font-size: 28px;
              }

              .action-bar {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
              }
            }

            @media (max-width: 480px) {
              .grid-container {
                grid-template-columns: 1fr;
              }

              header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
              }

              .chart-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
              }
            }
          </style>
        </head>
        <body>
          <div class="dashboard">
            <header>
              <div class="logo-section">
                <div class="logo">H</div>
                <div class="title-section">
                  <h1>Health Monitoring System</h1>
                  <p>Real-time patient data analytics</p>
                </div>
              </div>
              <div class="status-badge" id="connectionStatus">
                <span class="status-indicator"></span>
                <span>Connected</span>
              </div>
            </header>

            <div class="action-bar">
              <div class="data-info">
                <span id="dataPoints">0</span> data points collected | Last
                update:
                <span id="lastUpdate">--</span>
              </div>
              <button class="btn-primary" id="simulateBtn">
                Simulate Patient Data
              </button>
            </div>

            <div class="grid-container">
              <!-- Heart Rate Card -->
              <div class="sensor-card">
                <h3>
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path
                      d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"
                    ></path>
                  </svg>
                  Heart Rate
                </h3>
                <div class="sensor-value" id="heartRate">--</div>
                <div class="sensor-unit">BPM</div>
                <div class="sensor-range">Normal range: 60-100 BPM</div>
                <div class="sensor-trend" id="heartRateTrend">
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <polyline points="19 12 12 19 5 12"></polyline>
                  </svg>
                  <span>--</span>
                </div>
              </div>

              <!-- Body Temperature Card -->
              <div class="sensor-card">
                <h3>
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path
                      d="M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"
                    ></path>
                  </svg>
                  Body Temperature
                </h3>
                <div class="sensor-value" id="temperature">--</div>
                <div class="sensor-unit">°C</div>
                <div class="sensor-range">Normal range: 36.1-37.2°C</div>
                <div class="sensor-trend" id="temperatureTrend">
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <polyline points="19 12 12 19 5 12"></polyline>
                  </svg>
                  <span>--</span>
                </div>
              </div>

              <!-- Oxygen Saturation Card -->
              <div class="sensor-card">
                <h3>
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <circle cx="12" cy="12" r="10"></circle>
                    <circle cx="12" cy="12" r="6"></circle>
                  </svg>
                  Oxygen Saturation
                </h3>
                <div class="sensor-value" id="oxygenLevel">--</div>
                <div class="sensor-unit">%</div>
                <div class="sensor-range">Normal range: 95-100%</div>
                <div class="sensor-trend" id="oxygenTrend">
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <polyline points="19 12 12 19 5 12"></polyline>
                  </svg>
                  <span>--</span>
                </div>
              </div>

              <!-- Blood Pressure Card -->
              <div class="sensor-card">
                <h3>
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M12 20v-6M6 20V10M18 20V4"></path>
                  </svg>
                  Blood Pressure
                </h3>
                <div class="sensor-value" id="bloodPressure">--/--</div>
                <div class="sensor-unit">mmHg</div>
                <div class="sensor-range">
                  Normal range: 90/60 - 120/80 mmHg
                </div>
                <div class="sensor-trend" id="bloodPressureTrend">
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <polyline points="19 12 12 19 5 12"></polyline>
                  </svg>
                  <span>--</span>
                </div>
              </div>

              <!-- Respiratory Rate Card -->
              <div class="sensor-card">
                <h3>
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path
                      d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
                    ></path>
                  </svg>
                  Respiratory Rate
                </h3>
                <div class="sensor-value" id="respiratoryRate">--</div>
                <div class="sensor-unit">breaths/min</div>
                <div class="sensor-range">Normal range: 12-20 breaths/min</div>
                <div class="sensor-trend" id="respiratoryRateTrend">
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <polyline points="19 12 12 19 5 12"></polyline>
                  </svg>
                  <span>--</span>
                </div>
              </div>

              <!-- Blood Glucose Card -->
              <div class="sensor-card">
                <h3>
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"></path>
                  </svg>
                  Blood Glucose
                </h3>
                <div class="sensor-value" id="bloodGlucose">--</div>
                <div class="sensor-unit">mg/dL</div>
                <div class="sensor-range">Normal range: 70-140 mg/dL</div>
                <div class="sensor-trend" id="bloodGlucoseTrend">
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <polyline points="19 12 12 19 5 12"></polyline>
                  </svg>
                  <span>--</span>
                </div>
              </div>
            </div>

            <div class="chart-container">
              <div class="chart-header">
                <h2>Vital Signs Trends</h2>
                <div class="chart-controls">
                  <button class="chart-control-btn active" data-period="1h">
                    1h
                  </button>
                  <button class="chart-control-btn" data-period="6h">6h</button>
                  <button class="chart-control-btn" data-period="24h">
                    24h
                  </button>
                </div>
              </div>
              <canvas id="vitalSignsChart"></canvas>
            </div>
          </div>

          <div id="notification">Data saved to Firebase successfully!</div>

          <script>
            // Firebase Configuration (Replace with your credentials)
            const firebaseConfig = {
              apiKey: "AIzaSyCvHiTAGdlMaH2WNb4LmxlUMJ9BIwNxF_g",
              authDomain: "bms-exsel.firebaseapp.com",
              databaseURL: "https://bms-exsel-default-rtdb.firebaseio.com/",
              projectId: "bms-exsel",
              storageBucket: "bms-exsel.appspot.com",
              messagingSenderId: "950039193184",
              appId: "1:950039193184:web:f97fc79d5798ab3f628505",
              measurementId: "G-L8S1N8Q0CD",
            };

            // Initialize Firebase
            firebase.initializeApp(firebaseConfig);
            const database = firebase.database();

            // DOM Elements
            const simulateBtn = document.getElementById("simulateBtn");
            const connectionStatus =
              document.getElementById("connectionStatus");
            const lastUpdate = document.getElementById("lastUpdate");
            const dataPoints = document.getElementById("dataPoints");
            const notification = document.getElementById("notification");

            // Historical data for charts
            let historicalData = {
              timestamps: [],
              heartRate: [],
              temperature: [],
              oxygenLevel: [],
              bloodPressureSystolic: [],
              bloodPressureDiastolic: [],
              respiratoryRate: [],
              bloodGlucose: [],
            };

            // Previous values for trend indicators
            let previousValues = {
              heartRate: null,
              temperature: null,
              oxygenLevel: null,
              bloodPressureSystolic: null,
              bloodPressureDiastolic: null,
              respiratoryRate: null,
              bloodGlucose: null,
            };

            let dataPointCount = 0;
            let chart;

            // Initialize the chart
            function initChart() {
              const ctx = document
                .getElementById("vitalSignsChart")
                .getContext("2d");

              chart = new Chart(ctx, {
                type: "line",
                data: {
                  labels: [],
                  datasets: [
                    {
                      label: "Heart Rate (BPM)",
                      data: [],
                      borderColor: "#E74C3C",
                      backgroundColor: "rgba(231, 76, 60, 0.1)",
                      tension: 0.4,
                      borderWidth: 2,
                      pointRadius: 3,
                    },
                    {
                      label: "Temperature (°C)",
                      data: [],
                      borderColor: "#F39C12",
                      backgroundColor: "rgba(243, 156, 18, 0.1)",
                      tension: 0.4,
                      borderWidth: 2,
                      pointRadius: 3,
                    },
                    {
                      label: "Oxygen Level (%)",
                      data: [],
                      borderColor: "#3498DB",
                      backgroundColor: "rgba(52, 152, 219, 0.1)",
                      tension: 0.4,
                      borderWidth: 2,
                      pointRadius: 3,
                    },
                    {
                      label: "Respiratory Rate (breaths/min)",
                      data: [],
                      borderColor: "#9B59B6",
                      backgroundColor: "rgba(155, 89, 182, 0.1)",
                      tension: 0.4,
                      borderWidth: 2,
                      pointRadius: 3,
                    },
                  ],
                },
                options: {
                  responsive: true,
                  maintainAspectRatio: false,
                  plugins: {
                    legend: {
                      position: "top",
                    },
                    tooltip: {
                      mode: "index",
                      intersect: false,
                    },
                  },
                  scales: {
                    x: {
                      title: {
                        display: true,
                        text: "Time",
                      },
                    },
                    y: {
                      beginAtZero: false,
                      title: {
                        display: true,
                        text: "Value",
                      },
                    },
                  },
                  elements: {
                    line: {
                      fill: true,
                    },
                  },
                  animation: {
                    duration: 1000,
                  },
                },
              });
            }

            // Update chart with new data
            function updateChart() {
              if (!chart) return;

              // Only keep the last 20 data points to avoid overcrowding
              const dataLimit = 20;

              if (historicalData.timestamps.length > dataLimit) {
                historicalData.timestamps = historicalData.timestamps.slice(
                  -dataLimit
                );
                historicalData.heartRate = historicalData.heartRate.slice(
                  -dataLimit
                );
                historicalData.temperature = historicalData.temperature.slice(
                  -dataLimit
                );
                historicalData.oxygenLevel = historicalData.oxygenLevel.slice(
                  -dataLimit
                );
                historicalData.respiratoryRate =
                  historicalData.respiratoryRate.slice(-dataLimit);
              }

              chart.data.labels = historicalData.timestamps;
              chart.data.datasets[0].data = historicalData.heartRate;
              chart.data.datasets[1].data = historicalData.temperature;
              chart.data.datasets[2].data = historicalData.oxygenLevel;
              chart.data.datasets[3].data = historicalData.respiratoryRate;

              chart.update();
            }

            // Generate random value within range
            function randomValue(min, max, decimals = 0) {
              const value = Math.random() * (max - min) + min;
              return decimals === 0
                ? Math.floor(value)
                : value.toFixed(decimals);
            }

            // Set trend indicator
            function setTrendIndicator(id, currentValue, previousValue) {
              const element = document.getElementById(id);
              const iconElement = element.querySelector("svg");
              const textElement = element.querySelector("span");

              if (previousValue === null) {
                element.className = "sensor-trend";
                textElement.textContent = "Stable";
                iconElement.style.transform = "rotate(0deg)";
                return;
              }

              if (currentValue > previousValue) {
                element.className = "sensor-trend trend-up";
                textElement.textContent = "Rising";
                iconElement.style.transform = "rotate(180deg)";
              } else if (currentValue < previousValue) {
                element.className = "sensor-trend trend-down";
                textElement.textContent = "Falling";
                iconElement.style.transform = "rotate(0deg)";
              } else {
                element.className = "sensor-trend trend-stable";
                textElement.textContent = "Stable";
                iconElement.style.transform = "rotate(90deg)";
              }
            }

            // Show notification
            function showNotification(message) {
              notification.textContent = message;
              notification.style.display = "block";

              setTimeout(() => {
                notification.style.opacity = "0";
                setTimeout(() => {
                  notification.style.display = "none";
                  notification.style.opacity = "1";
                }, 300);
              }, 3000);
            }

            // Generate realistic health data
            function generateHealthData() {
              // Heart Rate (60-100 BPM normal range)
              const heartRate = randomValue(60, 100);

              // Temperature (36.1-37.2°C normal range)
              const temperature = randomValue(36.1, 37.2, 1);

              // Oxygen Level (95-100% normal range)
              const oxygenLevel = randomValue(95, 100);

              // Blood Pressure (90/60 - 120/80 mmHg normal range)
              const systolic = randomValue(90, 140);
              const diastolic = randomValue(60, 90);

              // Respiratory Rate (12-20 breaths/min normal range)
              const respiratoryRate = randomValue(12, 20);

              // Blood Glucose (70-140 mg/dL normal range)
              const bloodGlucose = randomValue(70, 140);

              // Current timestamp
              const now = new Date();
              const timestamp = now.toLocaleTimeString();

              // Update UI
              document.getElementById("heartRate").textContent = heartRate;
              document.getElementById("temperature").textContent = temperature;
              document.getElementById("oxygenLevel").textContent = oxygenLevel;
              document.getElementById(
                "bloodPressure"
              ).textContent = `${systolic}/${diastolic}`;
              document.getElementById("respiratoryRate").textContent =
                respiratoryRate;
              document.getElementById("bloodGlucose").textContent =
                bloodGlucose;

              // Set trend indicators
              setTrendIndicator(
                "heartRateTrend",
                heartRate,
                previousValues.heartRate
              );
              setTrendIndicator(
                "temperatureTrend",
                temperature,
                previousValues.temperature
              );
              setTrendIndicator(
                "oxygenTrend",
                oxygenLevel,
                previousValues.oxygenLevel
              );
              setTrendIndicator(
                "bloodPressureTrend",
                systolic,
                previousValues.bloodPressureSystolic
              );
              setTrendIndicator(
                "respiratoryRateTrend",
                respiratoryRate,
                previousValues.respiratoryRate
              );
              setTrendIndicator(
                "bloodGlucoseTrend",
                bloodGlucose,
                previousValues.bloodGlucose
              );

              // Update previous values
              previousValues.heartRate = heartRate;
              previousValues.temperature = temperature;
              previousValues.oxygenLevel = oxygenLevel;
              previousValues.bloodPressureSystolic = systolic;
              previousValues.bloodPressureDiastolic = diastolic;
              previousValues.respiratoryRate = respiratoryRate;
              previousValues.bloodGlucose = bloodGlucose;

              // Update historical data for chart
              historicalData.timestamps.push(timestamp);
              historicalData.heartRate.push(heartRate);
              historicalData.temperature.push(temperature);
              historicalData.oxygenLevel.push(oxygenLevel);
              historicalData.bloodPressureSystolic.push(systolic);
              historicalData.bloodPressureDiastolic.push(diastolic);
              historicalData.respiratoryRate.push(respiratoryRate);
              historicalData.bloodGlucose.push(bloodGlucose);

              // Update chart
              updateChart();

              // Update last update timestamp
              lastUpdate.textContent = now.toLocaleString();

              // Update data point count
              dataPointCount++;
              dataPoints.textContent = dataPointCount;

              // Return data object for Firebase
              return {
                heart_rate: heartRate,
                temperature: temperature,
                oxygen_level: oxygenLevel,
                blood_pressure: {
                  systolic: systolic,
                  diastolic: diastolic,
                },
                respiratory_rate: respiratoryRate,
                blood_glucose: bloodGlucose,
                timestamp: now.toISOString(),
              };
            }

            // Save data to Firebase
            function saveToFirebase(data) {
              return database
                .ref("health_data")
                .push(data)
                .then(() => {
                  showNotification("Data saved to Firebase successfully!");
                  return true;
                })
                .catch((error) => {
                  console.error("Error saving data:", error);
                  showNotification("Error saving data to Firebase!");
                  return false;
                });
            }

            // Initialize the simulation
            function init() {
              // Initialize chart
              initChart();

              // Generate data immediately
              const initialData = generateHealthData();
              saveToFirebase(initialData);

              // Set up auto data generation
              const autoGenerateInterval = 10000; // Generate data every 10 seconds
              setInterval(() => {
                const data = generateHealthData();
                saveToFirebase(data);
              }, autoGenerateInterval);

              // Set up manual data generation
              simulateBtn.addEventListener("click", () => {
                const data = generateHealthData();
                saveToFirebase(data);
              });

              // Set up chart controls
              document.querySelectorAll(".chart-control-btn").forEach((btn) => {
                btn.addEventListener("click", () => {
                  document
                    .querySelectorAll(".chart-control-btn")
                    .forEach((b) => b.classList.remove("active"));
                  btn.classList.add("active");

                  // In a real app, you would filter data by time period here
                  // For demo purposes, we're just changing the chart animation
                  chart.options.animation.duration =
                    parseInt(btn.dataset.period.replace("h", "")) * 100;
                  chart.update();
                });
              });

              // Set up Firebase connection status
              const connectedRef = database.ref(".info/connected");
              connectedRef.on("value", (snap) => {
                if (snap.val() === true) {
                  connectionStatus.classList.remove("disconnected");
                  connectionStatus.innerHTML =
                    '<span class="status-indicator"></span><span>Connected</span>';
                } else {
                  connectionStatus.classList.add("disconnected");
                  connectionStatus.innerHTML =
                    '<span class="status-indicator"></span><span>Disconnected</span>';
                }
              });
            }

            // Check when the DOM is fully loaded
            document.addEventListener("DOMContentLoaded", init);
          </script>
        </body>
      </html>
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-auth.js"></script>
    <script type="module">
      import { initializeApp } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-app.js";
      import {
        getAuth,
        onAuthStateChanged,
        signOut,
      } from "https://www.gstatic.com/firebasejs/11.1.0/firebase-auth.js";

      // Firebase Configuration
      const firebaseConfig = {
        apiKey: "AIzaSyCvHiTAGdlMaH2WNb4LmxlUMJ9BIwNxF_g",
        authDomain: "bms-exsel.firebaseapp.com",
        projectId: "bms-exsel",
        storageBucket: "bms-exsel.appspot.com",
        messagingSenderId: "950039193184",
        appId: "1:950039193184:web:f97fc79d5798ab3f628505",
        measurementId: "G-L8S1N8Q0CD",
      };

      // Initialize Firebase
      const app = initializeApp(firebaseConfig);
      const auth = getAuth(app);

      // Function to Update User Profile
      function updateUserProfile(user) {
        if (!user) return;

        console.log("Updating User Profile:", user); // Debugging Step

        const userName = user.displayName || "User";
        const userProfilePicture =
          user.photoURL || "https://via.placeholder.com/40"; // Default image

        // Update UI Elements
        document.getElementById("user-name").textContent = userName;
        document.querySelector(
          ".user-avatar"
        ).innerHTML = `<img src="${userProfilePicture}" alt="User Avatar">`;
      }

      // Load User Profile on Authentication State Change
      onAuthStateChanged(auth, (user) => {
        if (user) {
          console.log("User Logged In:", user);
          updateUserProfile(user);
        } else {
          console.warn("User not logged in, redirecting...");
          window.location.href = "{{ url_for('home') }}";
        }
      });

      // Toggle dropdown when clicking on user profile
      document.querySelector(".user-profile").addEventListener("click", (e) => {
        e.stopPropagation(); // Prevent event from bubbling
        document.querySelector(".dropdown-menu").classList.toggle("active");
      });
      // Update active sidebar item based on current URL or clicked item
      function updateActiveSidebarItem(pageUrl) {
        // Remove active class from all nav items
        document.querySelectorAll(".nav-item").forEach((item) => {
          item.classList.remove("active");
        });

        // Add active class to the clicked/current item
        const activeItem = document.querySelector(
          `.nav-item[href="${pageUrl}"]`
        );
        if (activeItem) {
          activeItem.classList.add("active");
        }
      }

      // Close dropdown when clicking outside
      document.addEventListener("click", (e) => {
        const dropdown = document.querySelector(".dropdown-menu");
        const userProfile = document.querySelector(".user-profile");

        if (!userProfile.contains(e.target)) {
          dropdown.classList.remove("active");
        }
      });
      function loadPage(pageUrl) {
        const mainContent = document.getElementById("main-content");

        mainContent.innerHTML = `
    <div style="text-align: center; padding: 20px;">
      <i class="fas fa-spinner fa-spin fa-2x"></i>
      <p>Loading...</p>
    </div>`;

        fetch(pageUrl)
          .then((response) => response.text())
          .then((html) => {
            mainContent.innerHTML = html;

            // Re-run Firebase authentication after loading new content
            onAuthStateChanged(auth, (user) => {
              if (user) {
                updateUserProfile(user);
              }
            });

            // Extract and execute new scripts
            mainContent.querySelectorAll("script").forEach((oldScript) => {
              const newScript = document.createElement("script");
              newScript.textContent = oldScript.textContent;
              document.body.appendChild(newScript);
            });
          })
          .catch((error) => console.error("Error loading page:", error));
      }

      // Attach navigation event listeners
      document.querySelectorAll(".nav-item").forEach((item) => {
        item.addEventListener("click", function (event) {
          event.preventDefault();
          const pageUrl = this.getAttribute("href");
          loadPage(pageUrl);
        });
      });

      // Initialize variables for vital signs
      let heartRateHistory = Array(10).fill(85);
      let bpSystolicHistory = Array(10).fill(120);
      let bpDiastolicHistory = Array(10).fill(80);
      let tempHistory = Array(10).fill(98.6);
      let oxygenHistory = Array(10).fill(98);

      // ECG data points
      let ecgData = [];
      let ecgCanvas = document.getElementById("ecg-canvas");
      let ecgCtx = ecgCanvas.getContext("2d");

      // Initialize ECG data with a normal pattern
      function initECG() {
        // Basic ECG pattern (simplified)
        const basePattern = [
          0.2, 0.2, 0.2, 0.2, 0.2, 0.3, 2.0, -0.5, 0.2, 0.2, 0.2, 0.2, 0.5, 0.7,
          0.5, 0.3, 0.2, 0.2,
        ];

        // Generate initial ECG data by repeating the pattern
        for (let i = 0; i < 200; i++) {
          ecgData.push(
            basePattern[i % basePattern.length] + (Math.random() * 0.1 - 0.05)
          );
        }
      }

      // Draw ECG line
      function drawECG() {
        const width = ecgCanvas.width;
        const height = ecgCanvas.height;

        // Clear canvas
        ecgCtx.clearRect(0, 0, width, height);

        // Draw ECG line
        ecgCtx.beginPath();
        ecgCtx.strokeStyle = "#4CAF50";
        ecgCtx.lineWidth = 2;

        for (let i = 0; i < ecgData.length; i++) {
          const x = (i / ecgData.length) * width;
          const y = height / 2 - (ecgData[i] * height) / 6;

          if (i === 0) {
            ecgCtx.moveTo(x, y);
          } else {
            ecgCtx.lineTo(x, y);
          }
        }

        ecgCtx.stroke();
      }

      // Update ECG data
      function updateECG() {
        // Remove first data point
        ecgData.shift();

        // Add new data point (based on the pattern)
        const basePatternIndex = ecgData.length % 18;
        let newValue;

        if (basePatternIndex === 6) {
          // The peak of the QRS complex
          newValue = 2.0 + (Math.random() * 0.4 - 0.2);
        } else if (basePatternIndex === 7) {
          // The drop after the peak
          newValue = -0.5 + (Math.random() * 0.2 - 0.1);
        } else if (basePatternIndex >= 12 && basePatternIndex <= 15) {
          // The T wave
          const tWaveHeight = [0.5, 0.7, 0.5, 0.3];
          newValue =
            tWaveHeight[basePatternIndex - 12] + (Math.random() * 0.1 - 0.05);
        } else {
          // Baseline
          newValue = 0.2 + (Math.random() * 0.1 - 0.05);
        }

        ecgData.push(newValue);
        drawECG();
      }

      // Function to update vital signs with random fluctuations
      function updateVitals() {
        // Generate new vital values with realistic fluctuations
        const newHeartRate = Math.floor(85 + (Math.random() * 20 - 10));
        const newSystolic = Math.floor(120 + (Math.random() * 30 - 15));
        const newDiastolic = Math.floor(80 + (Math.random() * 20 - 10));
        const newTemp = (98.6 + (Math.random() * 1.0 - 0.5)).toFixed(1);
        const newOxygen = Math.floor(98 + (Math.random() * 4 - 2));

        // Shift histories and add new values
        heartRateHistory.shift();
        heartRateHistory.push(newHeartRate);

        bpSystolicHistory.shift();
        bpSystolicHistory.push(newSystolic);

        bpDiastolicHistory.shift();
        bpDiastolicHistory.push(newDiastolic);

        tempHistory.shift();
        tempHistory.push(parseFloat(newTemp));

        oxygenHistory.shift();
        oxygenHistory.push(newOxygen);

        // Update displayed values
        document.getElementById("heart-rate").textContent = newHeartRate;
        document.getElementById(
          "blood-pressure"
        ).textContent = `${newSystolic}/${newDiastolic}`;
        document.getElementById("temperature").textContent = newTemp;
        document.getElementById("oxygen").textContent = newOxygen;

        // Update time
        const now = new Date();
        document.getElementById(
          "update-time"
        ).textContent = `${now.getHours()}:${now
          .getMinutes()
          .toString()
          .padStart(2, "0")}:${now.getSeconds().toString().padStart(2, "0")}`;

        // Update status based on vitals
        updateStatus(
          newHeartRate,
          newSystolic,
          newDiastolic,
          newTemp,
          newOxygen
        );

        // Update graphs
        updateGraphs();

        // Randomly add notifications (10% chance)
        if (Math.random() < 0.1) {
          addNotification();
        }
      }

      // Update patient status based on vitals
      function updateStatus(hr, sys, dia, temp, oxy) {
        const statusEl = document.getElementById("patient-status");
        const hrEl = document.getElementById("heart-rate");
        const bpEl = document.getElementById("blood-pressure");
        const tempEl = document.getElementById("temperature");
        const oxyEl = document.getElementById("oxygen");

        // Reset classes
        hrEl.className = "vital-value";
        bpEl.className = "vital-value";
        tempEl.className = "vital-value";
        oxyEl.className = "vital-value";

        let isAlert = false;
        let isWarning = false;

        // Check heart rate
        if (hr < 50 || hr > 120) {
          hrEl.className = "vital-value alert";
          isAlert = true;
        } else if (hr < 60 || hr > 100) {
          hrEl.className = "vital-value warning";
          isWarning = true;
        } else {
          hrEl.className = "vital-value normal";
        }

        // Check blood pressure
        if (sys > 180 || dia > 120 || sys < 90 || dia < 60) {
          bpEl.className = "vital-value alert";
          isAlert = true;
        } else if (sys > 140 || dia > 90) {
          bpEl.className = "vital-value warning";
          isWarning = true;
        } else {
          bpEl.className = "vital-value normal";
        }

        // Check temperature
        if (temp > 103 || temp < 95) {
          tempEl.className = "vital-value alert";
          isAlert = true;
        } else if (temp > 100.4 || temp < 97) {
          tempEl.className = "vital-value warning";
          isWarning = true;
        } else {
          tempEl.className = "vital-value normal";
        }

        // Check oxygen
        if (oxy < 90) {
          oxyEl.className = "vital-value alert";
          isAlert = true;
        } else if (oxy < 95) {
          oxyEl.className = "vital-value warning";
          isWarning = true;
        } else {
          oxyEl.className = "vital-value normal";
        }

        // Update overall status
        if (isAlert) {
          statusEl.textContent = "Critical";
          statusEl.style.backgroundColor = "#D32F2F";
        } else if (isWarning) {
          statusEl.textContent = "Needs Attention";
          statusEl.style.backgroundColor = "#FF9800";
        } else {
          statusEl.textContent = "Stable";
          statusEl.style.backgroundColor = "#4CAF50";
        }
      }

      // Update the bar graphs
      function updateGraphs() {
        // Update heart rate graph
        const hrBars = document.querySelectorAll("#heart-rate-graph .bar");
        for (let i = 0; i < hrBars.length; i++) {
          const percentHeight = (heartRateHistory[i] / 150) * 100;
          hrBars[i].style.height = `${percentHeight}%`;

          // Color based on value
          if (heartRateHistory[i] < 60 || heartRateHistory[i] > 100) {
            hrBars[i].style.backgroundColor =
              heartRateHistory[i] < 50 || heartRateHistory[i] > 120
                ? "#D32F2F"
                : "#FF9800";
          } else {
            hrBars[i].style.backgroundColor = "#4CAF50";
          }
        }

        // Update blood pressure graph
        const bpBars = document.querySelectorAll("#bp-graph .bar");
        for (let i = 0; i < bpBars.length; i++) {
          const percentHeight = (bpSystolicHistory[i] / 200) * 100;
          bpBars[i].style.height = `${percentHeight}%`;

          // Color based on value
          if (bpSystolicHistory[i] > 140 || bpDiastolicHistory[i] > 90) {
            bpBars[i].style.backgroundColor =
              bpSystolicHistory[i] > 180 || bpDiastolicHistory[i] > 120
                ? "#D32F2F"
                : "#FF9800";
          } else {
            bpBars[i].style.backgroundColor = "#4CAF50";
          }
        }

        // Update temperature graph
        const tempBars = document.querySelectorAll("#temp-graph .bar");
        for (let i = 0; i < tempBars.length; i++) {
          const percentHeight = ((tempHistory[i] - 95) / 10) * 100;
          tempBars[i].style.height = `${percentHeight}%`;

          // Color based on value
          if (tempHistory[i] > 100.4 || tempHistory[i] < 97) {
            tempBars[i].style.backgroundColor =
              tempHistory[i] > 103 || tempHistory[i] < 95
                ? "#D32F2F"
                : "#FF9800";
          } else {
            tempBars[i].style.backgroundColor = "#4CAF50";
          }
        }

        // Update oxygen graph
        const oxyBars = document.querySelectorAll("#oxygen-graph .bar");
        for (let i = 0; i < oxyBars.length; i++) {
          const percentHeight = oxygenHistory[i];
          oxyBars[i].style.height = `${percentHeight}%`;

          // Color based on value
          if (oxygenHistory[i] < 95) {
            oxyBars[i].style.backgroundColor =
              oxygenHistory[i] < 90 ? "#D32F2F" : "#FF9800";
          } else {
            oxyBars[i].style.backgroundColor = "#4CAF50";
          }
        }
      }

      // Add a random notification
      function addNotification() {
        const notifications = [
          "Nurse checked vitals",
          "IV fluid adjustment",
          "Patient repositioned",
          "Medication administered: Ibuprofen 400mg",
          "Physician visit completed",
          "Physical therapy session",
          "Lab samples collected",
          "Respiratory therapy",
          "Patient requested assistance",
          "Nutritional intake recorded",
          "Fluid output recorded",
          "Blood glucose checked",
        ];

        const randomNotification =
          notifications[Math.floor(Math.random() * notifications.length)];
        const now = new Date();
        const timeString = `Today, ${now.getHours()}:${now
          .getMinutes()
          .toString()
          .padStart(2, "0")}`;

        const notificationElement = document.createElement("div");
        notificationElement.className = "notification";
        notificationElement.innerHTML = `
        <div>${randomNotification}</div>
        <div class="notification-time">${timeString}</div>
      `;

        const notificationsContainer = document.getElementById("notifications");
        notificationsContainer.insertBefore(
          notificationElement,
          notificationsContainer.firstChild
        );

        // Keep only the last 5 notifications
        if (notificationsContainer.children.length > 5) {
          notificationsContainer.removeChild(notificationsContainer.lastChild);
        }
      }

      // Initialize ECG
      initECG();
      drawECG();

      // Start updating vitals and ECG
      setInterval(updateVitals, 3000); // Update vitals every 3 seconds
      setInterval(updateECG, 50);

      // Logout Function
      document
        .getElementById("logout-btn")
        .addEventListener("click", logoutUser);

      function logoutUser() {
        signOut(auth)
          .then(() => {
            console.log("User signed out.");
            window.location.href = "{{ url_for('home') }}";
          })
          .catch((error) => {
            console.error("Logout Error:", error);
          });
      }
    </script>
  </body>
</html>
